{"version":3,"sources":["../../../src/php/strings/htmlspecialchars.js"],"names":[],"mappings":";;AAAA,OAAO,OAAP,GAAiB,SAAS,gBAAT,CAA2B,MAA3B,EAAmC,UAAnC,EAA+C,OAA/C,EAAwD,YAAxD,EAAsE;;;;;;;;;;;;;;;;;;;;;AAqBrF,MAAI,UAAU,CAAd;AACA,MAAI,IAAI,CAAR;AACA,MAAI,WAAW,KAAf;AACA,MAAI,OAAO,UAAP,KAAsB,WAAtB,IAAqC,eAAe,IAAxD,EAA8D;AAC5D,iBAAa,CAAb;AACD;AACD,WAAS,UAAU,EAAnB;AACA,WAAS,OAAO,QAAP,EAAT;;AAEA,MAAI,iBAAiB,KAArB,EAA4B;;AAE1B,aAAS,OAAO,OAAP,CAAe,IAAf,EAAqB,OAArB,CAAT;AACD;;AAED,WAAS,OACN,OADM,CACE,IADF,EACQ,MADR,EAEN,OAFM,CAEE,IAFF,EAEQ,MAFR,CAAT;;AAIA,MAAI,OAAO;AACT,oBAAgB,CADP;AAET,6BAAyB,CAFhB;AAGT,6BAAyB,CAHhB;AAIT,kBAAc,CAJL;AAKT,kBAAc,CALL;AAMT,kBAAc;AANL,GAAX;AAQA,MAAI,eAAe,CAAnB,EAAsB;AACpB,eAAW,IAAX;AACD;AACD,MAAI,OAAO,UAAP,KAAsB,QAA1B,EAAoC;;AAElC,iBAAa,GAAG,MAAH,CAAU,UAAV,CAAb;AACA,SAAK,IAAI,CAAT,EAAY,IAAI,WAAW,MAA3B,EAAmC,GAAnC,EAAwC;;AAEtC,UAAI,KAAK,WAAW,CAAX,CAAL,MAAwB,CAA5B,EAA+B;AAC7B,mBAAW,IAAX;AACD,OAFD,MAEO,IAAI,KAAK,WAAW,CAAX,CAAL,CAAJ,EAAyB;AAC9B,kBAAU,UAAU,KAAK,WAAW,CAAX,CAAL,CAApB;AACD;AACF;AACD,iBAAa,OAAb;AACD;AACD,MAAI,aAAa,KAAK,qBAAtB,EAA6C;AAC3C,aAAS,OAAO,OAAP,CAAe,IAAf,EAAqB,QAArB,CAAT;AACD;AACD,MAAI,CAAC,QAAL,EAAe;AACb,aAAS,OAAO,OAAP,CAAe,IAAf,EAAqB,QAArB,CAAT;AACD;;AAED,SAAO,MAAP;AACD,CAvED","file":"htmlspecialchars.js","sourcesContent":["module.exports = function htmlspecialchars (string, quoteStyle, charset, doubleEncode) {\n  //       discuss at: http://locutus.io/php/htmlspecialchars/\n  //      original by: Mirek Slugen\n  //      improved by: Kevin van Zonneveld (http://kvz.io)\n  //      bugfixed by: Nathan\n  //      bugfixed by: Arno\n  //      bugfixed by: Brett Zamir (http://brett-zamir.me)\n  //      bugfixed by: Brett Zamir (http://brett-zamir.me)\n  //       revised by: Kevin van Zonneveld (http://kvz.io)\n  //         input by: Ratheous\n  //         input by: Mailfaker (http://www.weedem.fr/)\n  //         input by: felix\n  // reimplemented by: Brett Zamir (http://brett-zamir.me)\n  //           note 1: charset argument not supported\n  //        example 1: htmlspecialchars(\"<a href='test'>Test</a>\", 'ENT_QUOTES')\n  //        returns 1: '&lt;a href=&#039;test&#039;&gt;Test&lt;/a&gt;'\n  //        example 2: htmlspecialchars(\"ab\\\"c'd\", ['ENT_NOQUOTES', 'ENT_QUOTES'])\n  //        returns 2: 'ab\"c&#039;d'\n  //        example 3: htmlspecialchars('my \"&entity;\" is still here', null, null, false)\n  //        returns 3: 'my &quot;&entity;&quot; is still here'\n\n  var optTemp = 0\n  var i = 0\n  var noquotes = false\n  if (typeof quoteStyle === 'undefined' || quoteStyle === null) {\n    quoteStyle = 2\n  }\n  string = string || ''\n  string = string.toString()\n\n  if (doubleEncode !== false) {\n    // Put this first to avoid double-encoding\n    string = string.replace(/&/g, '&amp;')\n  }\n\n  string = string\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n\n  var OPTS = {\n    'ENT_NOQUOTES': 0,\n    'ENT_HTML_QUOTE_SINGLE': 1,\n    'ENT_HTML_QUOTE_DOUBLE': 2,\n    'ENT_COMPAT': 2,\n    'ENT_QUOTES': 3,\n    'ENT_IGNORE': 4\n  }\n  if (quoteStyle === 0) {\n    noquotes = true\n  }\n  if (typeof quoteStyle !== 'number') {\n    // Allow for a single string or an array of string flags\n    quoteStyle = [].concat(quoteStyle)\n    for (i = 0; i < quoteStyle.length; i++) {\n      // Resolve string input to bitwise e.g. 'ENT_IGNORE' becomes 4\n      if (OPTS[quoteStyle[i]] === 0) {\n        noquotes = true\n      } else if (OPTS[quoteStyle[i]]) {\n        optTemp = optTemp | OPTS[quoteStyle[i]]\n      }\n    }\n    quoteStyle = optTemp\n  }\n  if (quoteStyle & OPTS.ENT_HTML_QUOTE_SINGLE) {\n    string = string.replace(/'/g, '&#039;')\n  }\n  if (!noquotes) {\n    string = string.replace(/\"/g, '&quot;')\n  }\n\n  return string\n}\n"]}