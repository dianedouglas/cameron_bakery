{"version":3,"sources":["../../../src/php/strings/sprintf.js"],"names":[],"mappings":"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","file":"sprintf.js","sourcesContent":["module.exports = function sprintf () {\n  //  discuss at: http://locutus.io/php/sprintf/\n  // original by: Ash Searle (http://hexmen.com/blog/)\n  // improved by: Michael White (http://getsprink.com)\n  // improved by: Jack\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Dj\n  // improved by: Allidylls\n  //    input by: Paulo Freitas\n  //    input by: Brett Zamir (http://brett-zamir.me)\n  //   example 1: sprintf(\"%01.2f\", 123.1)\n  //   returns 1: '123.10'\n  //   example 2: sprintf(\"[%10s]\", 'monkey')\n  //   returns 2: '[    monkey]'\n  //   example 3: sprintf(\"[%'#10s]\", 'monkey')\n  //   returns 3: '[####monkey]'\n  //   example 4: sprintf(\"%d\", 123456789012345)\n  //   returns 4: '123456789012345'\n  //   example 5: sprintf('%-03s', 'E')\n  //   returns 5: 'E00'\n\n  var regex = /%%|%(\\d+\\$)?([\\-+'#0 ]*)(\\*\\d+\\$|\\*|\\d+)?(?:\\.(\\*\\d+\\$|\\*|\\d+))?([scboxXuideEfFgG])/g\n  var a = arguments\n  var i = 0\n  var format = a[i++]\n\n  var _pad = function (str, len, chr, leftJustify) {\n    if (!chr) {\n      chr = ' '\n    }\n    var padding = (str.length >= len) ? '' : new Array(1 + len - str.length >>> 0).join(chr)\n    return leftJustify ? str + padding : padding + str\n  }\n\n  var justify = function (value, prefix, leftJustify, minWidth, zeroPad, customPadChar) {\n    var diff = minWidth - value.length\n    if (diff > 0) {\n      if (leftJustify || !zeroPad) {\n        value = _pad(value, minWidth, customPadChar, leftJustify)\n      } else {\n        value = [\n          value.slice(0, prefix.length),\n          _pad('', diff, '0', true),\n          value.slice(prefix.length)\n        ].join('')\n      }\n    }\n    return value\n  }\n\n  var _formatBaseX = function (value, base, prefix, leftJustify, minWidth, precision, zeroPad) {\n    // Note: casts negative numbers to positive ones\n    var number = value >>> 0\n    prefix = (prefix && number && {\n      '2': '0b',\n      '8': '0',\n      '16': '0x'\n    }[base]) || ''\n    value = prefix + _pad(number.toString(base), precision || 0, '0', false)\n    return justify(value, prefix, leftJustify, minWidth, zeroPad)\n  }\n\n  // _formatString()\n  var _formatString = function (value, leftJustify, minWidth, precision, zeroPad, customPadChar) {\n    if (precision !== null && precision !== undefined) {\n      value = value.slice(0, precision)\n    }\n    return justify(value, '', leftJustify, minWidth, zeroPad, customPadChar)\n  }\n\n  // doFormat()\n  var doFormat = function (substring, valueIndex, flags, minWidth, precision, type) {\n    var number, prefix, method, textTransform, value\n\n    if (substring === '%%') {\n      return '%'\n    }\n\n    // parse flags\n    var leftJustify = false\n    var positivePrefix = ''\n    var zeroPad = false\n    var prefixBaseX = false\n    var customPadChar = ' '\n    var flagsl = flags.length\n    var j\n    for (j = 0; j < flagsl; j++) {\n      switch (flags.charAt(j)) {\n        case ' ':\n          positivePrefix = ' '\n          break\n        case '+':\n          positivePrefix = '+'\n          break\n        case '-':\n          leftJustify = true\n          break\n        case \"'\":\n          customPadChar = flags.charAt(j + 1)\n          break\n        case '0':\n          zeroPad = true\n          customPadChar = '0'\n          break\n        case '#':\n          prefixBaseX = true\n          break\n      }\n    }\n\n    // parameters may be null, undefined, empty-string or real valued\n    // we want to ignore null, undefined and empty-string values\n    if (!minWidth) {\n      minWidth = 0\n    } else if (minWidth === '*') {\n      minWidth = +a[i++]\n    } else if (minWidth.charAt(0) === '*') {\n      minWidth = +a[minWidth.slice(1, -1)]\n    } else {\n      minWidth = +minWidth\n    }\n\n    // Note: undocumented perl feature:\n    if (minWidth < 0) {\n      minWidth = -minWidth\n      leftJustify = true\n    }\n\n    if (!isFinite(minWidth)) {\n      throw new Error('sprintf: (minimum-)width must be finite')\n    }\n\n    if (!precision) {\n      precision = 'fFeE'.indexOf(type) > -1 ? 6 : (type === 'd') ? 0 : undefined\n    } else if (precision === '*') {\n      precision = +a[i++]\n    } else if (precision.charAt(0) === '*') {\n      precision = +a[precision.slice(1, -1)]\n    } else {\n      precision = +precision\n    }\n\n    // grab value using valueIndex if required?\n    value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++]\n\n    switch (type) {\n      case 's':\n        return _formatString(value + '', leftJustify, minWidth, precision, zeroPad, customPadChar)\n      case 'c':\n        return _formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad)\n      case 'b':\n        return _formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad)\n      case 'o':\n        return _formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad)\n      case 'x':\n        return _formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad)\n      case 'X':\n        return _formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad)\n        .toUpperCase()\n      case 'u':\n        return _formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad)\n      case 'i':\n      case 'd':\n        number = +value || 0\n        // Plain Math.round doesn't just truncate\n        number = Math.round(number - number % 1)\n        prefix = number < 0 ? '-' : positivePrefix\n        value = prefix + _pad(String(Math.abs(number)), precision, '0', false)\n        return justify(value, prefix, leftJustify, minWidth, zeroPad)\n      case 'e':\n      case 'E':\n      case 'f': // @todo: Should handle locales (as per setlocale)\n      case 'F':\n      case 'g':\n      case 'G':\n        number = +value\n        prefix = number < 0 ? '-' : positivePrefix\n        method = ['toExponential', 'toFixed', 'toPrecision']['efg'.indexOf(type.toLowerCase())]\n        textTransform = ['toString', 'toUpperCase']['eEfFgG'.indexOf(type) % 2]\n        value = prefix + Math.abs(number)[method](precision)\n        return justify(value, prefix, leftJustify, minWidth, zeroPad)[textTransform]()\n      default:\n        return substring\n    }\n  }\n\n  return format.replace(regex, doFormat)\n}\n"]}