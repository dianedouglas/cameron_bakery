{"version":3,"sources":["../../../src/php/strings/money_format.js"],"names":[],"mappings":"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","file":"money_format.js","sourcesContent":["module.exports = function money_format (format, number) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/money_format/\n  // original by: Brett Zamir (http://brett-zamir.me)\n  //    input by: daniel airton wermann (http://wermann.com.br)\n  // bugfixed by: Brett Zamir (http://brett-zamir.me)\n  //      note 1: This depends on setlocale having the appropriate\n  //      note 1: locale (these examples use 'en_US')\n  //   example 1: money_format('%i', 1234.56)\n  //   returns 1: ' USD 1,234.56'\n  //   example 2: money_format('%14#8.2n', 1234.5678)\n  //   returns 2: ' $     1,234.57'\n  //   example 3: money_format('%14#8.2n', -1234.5678)\n  //   returns 3: '-$     1,234.57'\n  //   example 4: money_format('%(14#8.2n', 1234.5678)\n  //   returns 4: ' $     1,234.57 '\n  //   example 5: money_format('%(14#8.2n', -1234.5678)\n  //   returns 5: '($     1,234.57)'\n  //   example 6: money_format('%=014#8.2n', 1234.5678)\n  //   returns 6: ' $000001,234.57'\n  //   example 7: money_format('%=014#8.2n', -1234.5678)\n  //   returns 7: '-$000001,234.57'\n  //   example 8: money_format('%=*14#8.2n', 1234.5678)\n  //   returns 8: ' $*****1,234.57'\n  //   example 9: money_format('%=*14#8.2n', -1234.5678)\n  //   returns 9: '-$*****1,234.57'\n  //  example 10: money_format('%=*^14#8.2n', 1234.5678)\n  //  returns 10: '  $****1234.57'\n  //  example 11: money_format('%=*^14#8.2n', -1234.5678)\n  //  returns 11: ' -$****1234.57'\n  //  example 12: money_format('%=*!14#8.2n', 1234.5678)\n  //  returns 12: ' *****1,234.57'\n  //  example 13: money_format('%=*!14#8.2n', -1234.5678)\n  //  returns 13: '-*****1,234.57'\n  //  example 14: money_format('%i', 3590)\n  //  returns 14: ' USD 3,590.00'\n\n  var setlocale = require('../strings/setlocale')\n\n  // Per PHP behavior, there seems to be no extra padding\n  // for sign when there is a positive number, though my\n  // understanding of the description is that there should be padding;\n  // need to revisit examples\n\n  // Helpful info at http://ftp.gnu.org/pub/pub/old-gnu/Manuals/glibc-2.2.3/html_chapter/libc_7.html\n  // and http://publib.boulder.ibm.com/infocenter/zos/v1r10/index.jsp?topic=/com.ibm.zos.r10.bpxbd00/strfmp.htm\n\n  if (typeof number !== 'number') {\n    return null\n  }\n  // 1: flags, 3: width, 5: left, 7: right, 8: conversion\n  var regex = /%((=.|[+^(!-])*?)(\\d*?)(#(\\d+))?(\\.(\\d+))?([in%])/g\n\n  // Ensure the locale data we need is set up\n  setlocale('LC_ALL', 0)\n\n  var $global = (typeof window !== 'undefined' ? window : global)\n  $global.$locutus = $global.$locutus || {}\n  var $locutus = $global.$locutus\n  $locutus.php = $locutus.php || {}\n\n  var monetary = $locutus.php.locales[$locutus.php.localeCategories.LC_MONETARY].LC_MONETARY\n\n  var doReplace = function (n0, flags, n2, width, n4, left, n6, right, conversion) {\n    var value = ''\n    var repl = ''\n    if (conversion === '%') {\n      // Percent does not seem to be allowed with intervening content\n      return '%'\n    }\n    var fill = flags && (/=./).test(flags) ? flags.match(/=(.)/)[1] : ' ' // flag: =f (numeric fill)\n    // flag: ! (suppress currency symbol)\n    var showCurrSymbol = !flags || flags.indexOf('!') === -1\n    // field width: w (minimum field width)\n    width = parseInt(width, 10) || 0\n\n    var neg = number < 0\n    // Convert to string\n    number = number + ''\n    // We don't want negative symbol represented here yet\n    number = neg ? number.slice(1) : number\n\n    var decpos = number.indexOf('.')\n    // Get integer portion\n    var integer = decpos !== -1 ? number.slice(0, decpos) : number\n    // Get decimal portion\n    var fraction = decpos !== -1 ? number.slice(decpos + 1) : ''\n\n    var _strSplice = function (integerStr, idx, thouSep) {\n      var integerArr = integerStr.split('')\n      integerArr.splice(idx, 0, thouSep)\n      return integerArr.join('')\n    }\n\n    var intLen = integer.length\n    left = parseInt(left, 10)\n    var filler = intLen < left\n    if (filler) {\n      var fillnum = left - intLen\n      integer = new Array(fillnum + 1).join(fill) + integer\n    }\n    if (flags.indexOf('^') === -1) {\n      // flag: ^ (disable grouping characters (of locale))\n      // use grouping characters\n      // ','\n      var thouSep = monetary.mon_thousands_sep\n      // [3] (every 3 digits in U.S.A. locale)\n      var monGrouping = monetary.mon_grouping\n\n      if (monGrouping[0] < integer.length) {\n        for (var i = 0, idx = integer.length; i < monGrouping.length; i++) {\n          // e.g., 3\n          idx -= monGrouping[i]\n          if (idx <= 0) {\n            break\n          }\n          if (filler && idx < fillnum) {\n            thouSep = fill\n          }\n          integer = _strSplice(integer, idx, thouSep)\n        }\n      }\n      if (monGrouping[i - 1] > 0) {\n        // Repeating last grouping (may only be one) until highest portion of integer reached\n        while (idx > monGrouping[i - 1]) {\n          idx -= monGrouping[i - 1]\n          if (filler && idx < fillnum) {\n            thouSep = fill\n          }\n          integer = _strSplice(integer, idx, thouSep)\n        }\n      }\n    }\n\n    // left, right\n    if (right === '0') {\n      // No decimal or fractional digits\n      value = integer\n    } else {\n      // '.'\n      var decPt = monetary.mon_decimal_point\n      if (right === '' || right === undefined) {\n        right = conversion === 'i' ? monetary.int_frac_digits : monetary.frac_digits\n      }\n      right = parseInt(right, 10)\n\n      if (right === 0) {\n        // Only remove fractional portion if explicitly set to zero digits\n        fraction = ''\n        decPt = ''\n      } else if (right < fraction.length) {\n        fraction = Math.round(parseFloat(\n          fraction.slice(0, right) + '.' + fraction.substr(right, 1)\n        ))\n        if (right > fraction.length) {\n          fraction = new Array(right - fraction.length + 1).join('0') + fraction // prepend with 0's\n        }\n      } else if (right > fraction.length) {\n        fraction += new Array(right - fraction.length + 1).join('0') // pad with 0's\n      }\n      value = integer + decPt + fraction\n    }\n\n    var symbol = ''\n    if (showCurrSymbol) {\n      // 'i' vs. 'n' ('USD' vs. '$')\n      symbol = conversion === 'i' ? monetary.int_curr_symbol : monetary.currency_symbol\n    }\n    var signPosn = neg ? monetary.n_sign_posn : monetary.p_sign_posn\n\n    // 0: no space between curr. symbol and value\n    // 1: space sep. them unless symb. and sign are adjacent then space sep. them from value\n    // 2: space sep. sign and value unless symb. and sign are adjacent then space separates\n    var sepBySpace = neg ? monetary.n_sep_by_space : monetary.p_sep_by_space\n\n    // p_cs_precedes, n_cs_precedes\n    // positive currency symbol follows value = 0; precedes value = 1\n    var csPrecedes = neg ? monetary.n_cs_precedes : monetary.p_cs_precedes\n\n    // Assemble symbol/value/sign and possible space as appropriate\n    if (flags.indexOf('(') !== -1) {\n      // flag: parenth. for negative\n      // @todo: unclear on whether and how sepBySpace, signPosn, or csPrecedes have\n      // an impact here (as they do below), but assuming for now behaves as signPosn 0 as\n      // far as localized sepBySpace and signPosn behavior\n      repl = (csPrecedes ? symbol + (sepBySpace === 1 ? ' ' : '') : '') + value + (!csPrecedes ? (\n        sepBySpace === 1 ? ' ' : '') + symbol : '')\n      if (neg) {\n        repl = '(' + repl + ')'\n      } else {\n        repl = ' ' + repl + ' '\n      }\n    } else {\n      // '+' is default\n      // ''\n      var posSign = monetary.positive_sign\n      // '-'\n      var negSign = monetary.negative_sign\n      var sign = neg ? (negSign) : (posSign)\n      var otherSign = neg ? (posSign) : (negSign)\n      var signPadding = ''\n      if (signPosn) {\n        // has a sign\n        signPadding = new Array(otherSign.length - sign.length + 1).join(' ')\n      }\n\n      var valueAndCS = ''\n      switch (signPosn) {\n        // 0: parentheses surround value and curr. symbol;\n        // 1: sign precedes them;\n        // 2: sign follows them;\n        // 3: sign immed. precedes curr. symbol; (but may be space between)\n        // 4: sign immed. succeeds curr. symbol; (but may be space between)\n        case 0:\n          valueAndCS = csPrecedes\n            ? symbol + (sepBySpace === 1 ? ' ' : '') + value\n            : value + (sepBySpace === 1 ? ' ' : '') + symbol\n          repl = '(' + valueAndCS + ')'\n          break\n        case 1:\n          valueAndCS = csPrecedes\n            ? symbol + (sepBySpace === 1 ? ' ' : '') + value\n            : value + (sepBySpace === 1 ? ' ' : '') + symbol\n          repl = signPadding + sign + (sepBySpace === 2 ? ' ' : '') + valueAndCS\n          break\n        case 2:\n          valueAndCS = csPrecedes\n            ? symbol + (sepBySpace === 1 ? ' ' : '') + value\n            : value + (sepBySpace === 1 ? ' ' : '') + symbol\n          repl = valueAndCS + (sepBySpace === 2 ? ' ' : '') + sign + signPadding\n          break\n        case 3:\n          repl = csPrecedes\n            ? signPadding + sign + (sepBySpace === 2 ? ' ' : '') + symbol +\n              (sepBySpace === 1 ? ' ' : '') + value\n            : value + (sepBySpace === 1 ? ' ' : '') + sign + signPadding +\n              (sepBySpace === 2 ? ' ' : '') + symbol\n          break\n        case 4:\n          repl = csPrecedes\n            ? symbol + (sepBySpace === 2 ? ' ' : '') + signPadding + sign +\n              (sepBySpace === 1 ? ' ' : '') + value\n            : value + (sepBySpace === 1 ? ' ' : '') + symbol +\n              (sepBySpace === 2 ? ' ' : '') + sign + signPadding\n          break\n      }\n    }\n\n    var padding = width - repl.length\n    if (padding > 0) {\n      padding = new Array(padding + 1).join(' ')\n      // @todo: How does p_sep_by_space affect the count if there is a space?\n      // Included in count presumably?\n      if (flags.indexOf('-') !== -1) {\n        // left-justified (pad to right)\n        repl += padding\n      } else {\n        // right-justified (pad to left)\n        repl = padding + repl\n      }\n    }\n    return repl\n  }\n\n  return format.replace(regex, doReplace)\n}\n"]}