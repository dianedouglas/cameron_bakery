{"version":3,"sources":["../../../src/php/strings/addcslashes.js"],"names":[],"mappings":"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","file":"addcslashes.js","sourcesContent":["module.exports = function addcslashes (str, charlist) {\n  //  discuss at: http://locutus.io/php/addcslashes/\n  // original by: Brett Zamir (http://brett-zamir.me)\n  //      note 1: We show double backslashes in the return value example\n  //      note 1: code below because a JavaScript string will not\n  //      note 1: render them as backslashes otherwise\n  //   example 1: addcslashes('foo[ ]', 'A..z'); // Escape all ASCII within capital A to lower z range, including square brackets\n  //   returns 1: \"\\\\f\\\\o\\\\o\\\\[ \\\\]\"\n  //   example 2: addcslashes(\"zoo['.']\", 'z..A'); // Only escape z, period, and A here since not a lower-to-higher range\n  //   returns 2: \"\\\\zoo['\\\\.']\"\n  //   _example 3: addcslashes(\"@a\\u0000\\u0010\\u00A9\", \"\\0..\\37!@\\177..\\377\"); // Escape as octals those specified and less than 32 (0x20) or greater than 126 (0x7E), but not otherwise\n  //   _returns 3: '\\\\@a\\\\000\\\\020\\\\302\\\\251'\n  //   _example 4: addcslashes(\"\\u0020\\u007E\", \"\\40..\\175\"); // Those between 32 (0x20 or 040) and 126 (0x7E or 0176) decimal value will be backslashed if specified (not octalized)\n  //   _returns 4: '\\\\ ~'\n  //   _example 5: addcslashes(\"\\r\\u0007\\n\", '\\0..\\37'); // Recognize C escape sequences if specified\n  //   _returns 5: \"\\\\r\\\\a\\\\n\"\n  //   _example 6: addcslashes(\"\\r\\u0007\\n\", '\\0'); // Do not recognize C escape sequences if not specified\n  //   _returns 6: \"\\r\\u0007\\n\"\n\n  var target = ''\n  var chrs = []\n  var i = 0\n  var j = 0\n  var c = ''\n  var next = ''\n  var rangeBegin = ''\n  var rangeEnd = ''\n  var chr = ''\n  var begin = 0\n  var end = 0\n  var octalLength = 0\n  var postOctalPos = 0\n  var cca = 0\n  var escHexGrp = []\n  var encoded = ''\n  var percentHex = /%([\\dA-Fa-f]+)/g\n\n  var _pad = function (n, c) {\n    if ((n = n + '').length < c) {\n      return new Array(++c - n.length).join('0') + n\n    }\n    return n\n  }\n\n  for (i = 0; i < charlist.length; i++) {\n    c = charlist.charAt(i)\n    next = charlist.charAt(i + 1)\n    if (c === '\\\\' && next && (/\\d/).test(next)) {\n      // Octal\n      rangeBegin = charlist.slice(i + 1).match(/^\\d+/)[0]\n      octalLength = rangeBegin.length\n      postOctalPos = i + octalLength + 1\n      if (charlist.charAt(postOctalPos) + charlist.charAt(postOctalPos + 1) === '..') {\n        // Octal begins range\n        begin = rangeBegin.charCodeAt(0)\n        if ((/\\\\\\d/).test(charlist.charAt(postOctalPos + 2) + charlist.charAt(postOctalPos + 3))) {\n          // Range ends with octal\n          rangeEnd = charlist.slice(postOctalPos + 3).match(/^\\d+/)[0]\n          // Skip range end backslash\n          i += 1\n        } else if (charlist.charAt(postOctalPos + 2)) {\n          // Range ends with character\n          rangeEnd = charlist.charAt(postOctalPos + 2)\n        } else {\n          throw new Error('Range with no end point')\n        }\n        end = rangeEnd.charCodeAt(0)\n        if (end > begin) {\n          // Treat as a range\n          for (j = begin; j <= end; j++) {\n            chrs.push(String.fromCharCode(j))\n          }\n        } else {\n          // Supposed to treat period, begin and end as individual characters only, not a range\n          chrs.push('.', rangeBegin, rangeEnd)\n        }\n        // Skip dots and range end (already skipped range end backslash if present)\n        i += rangeEnd.length + 2\n      } else {\n        // Octal is by itself\n        chr = String.fromCharCode(parseInt(rangeBegin, 8))\n        chrs.push(chr)\n      }\n      // Skip range begin\n      i += octalLength\n    } else if (next + charlist.charAt(i + 2) === '..') {\n      // Character begins range\n      rangeBegin = c\n      begin = rangeBegin.charCodeAt(0)\n      if ((/\\\\\\d/).test(charlist.charAt(i + 3) + charlist.charAt(i + 4))) {\n        // Range ends with octal\n        rangeEnd = charlist.slice(i + 4).match(/^\\d+/)[0]\n        // Skip range end backslash\n        i += 1\n      } else if (charlist.charAt(i + 3)) {\n        // Range ends with character\n        rangeEnd = charlist.charAt(i + 3)\n      } else {\n        throw new Error('Range with no end point')\n      }\n      end = rangeEnd.charCodeAt(0)\n      if (end > begin) {\n        // Treat as a range\n        for (j = begin; j <= end; j++) {\n          chrs.push(String.fromCharCode(j))\n        }\n      } else {\n        // Supposed to treat period, begin and end as individual characters only, not a range\n        chrs.push('.', rangeBegin, rangeEnd)\n      }\n      // Skip dots and range end (already skipped range end backslash if present)\n      i += rangeEnd.length + 2\n    } else {\n      // Character is by itself\n      chrs.push(c)\n    }\n  }\n\n  for (i = 0; i < str.length; i++) {\n    c = str.charAt(i)\n    if (chrs.indexOf(c) !== -1) {\n      target += '\\\\'\n      cca = c.charCodeAt(0)\n      if (cca < 32 || cca > 126) {\n        // Needs special escaping\n        switch (c) {\n          case '\\n':\n            target += 'n'\n            break\n          case '\\t':\n            target += 't'\n            break\n          case '\\u000D':\n            target += 'r'\n            break\n          case '\\u0007':\n            target += 'a'\n            break\n          case '\\v':\n            target += 'v'\n            break\n          case '\\b':\n            target += 'b'\n            break\n          case '\\f':\n            target += 'f'\n            break\n          default:\n            // target += _pad(cca.toString(8), 3);break; // Sufficient for UTF-16\n            encoded = encodeURIComponent(c)\n\n            // 3-length-padded UTF-8 octets\n            if ((escHexGrp = percentHex.exec(encoded)) !== null) {\n              // already added a slash above:\n              target += _pad(parseInt(escHexGrp[1], 16).toString(8), 3)\n            }\n            while ((escHexGrp = percentHex.exec(encoded)) !== null) {\n              target += '\\\\' + _pad(parseInt(escHexGrp[1], 16).toString(8), 3)\n            }\n            break\n        }\n      } else {\n        // Perform regular backslashed escaping\n        target += c\n      }\n    } else {\n      // Just add the character unescaped\n      target += c\n    }\n  }\n\n  return target\n}\n"]}