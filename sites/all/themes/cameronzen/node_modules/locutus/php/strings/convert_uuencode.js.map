{"version":3,"sources":["../../../src/php/strings/convert_uuencode.js"],"names":[],"mappings":";;AAAA,OAAO,OAAP,GAAiB,SAAS,gBAAT,CAA2B,GAA3B,EAAgC;;;;;;;;;;AAS/C,MAAI,WAAW,QAAQ,kBAAR,CAAf;;AAEA,MAAI,MAAM,SAAN,GAAM,CAAU,CAAV,EAAa;AACrB,WAAO,OAAO,YAAP,CAAoB,CAApB,CAAP;AACD,GAFD;;AAIA,MAAI,CAAC,GAAD,IAAQ,QAAQ,EAApB,EAAwB;AACtB,WAAO,IAAI,CAAJ,CAAP;AACD,GAFD,MAEO,IAAI,CAAC,SAAS,GAAT,CAAL,EAAoB;AACzB,WAAO,KAAP;AACD;;AAED,MAAI,IAAI,CAAR;AACA,MAAI,IAAI,CAAR;AACA,MAAI,IAAI,CAAR;AACA,MAAI,IAAI,CAAR;AACA,MAAI,UAAU,EAAd;AACA,MAAI,OAAO,EAAX;AACA,MAAI,OAAO,EAAX;AACA,MAAI,QAAQ,EAAZ;;;AAGA,MAAI,QAAQ,SAAR,KAAQ,GAAY;AACtB,YAAQ,IAAI,MAAJ,CAAW,CAAX,EAAc,EAAd,EAAkB,KAAlB,CAAwB,EAAxB,CAAR;AACA,SAAK,CAAL,IAAU,KAAV,EAAiB;AACf,YAAM,CAAN,IAAW,MAAM,CAAN,EAAS,UAAT,CAAoB,CAApB,CAAX;AACD;AACD,WAAO,MAAM,MAAN,IAAgB,CAAvB;AACD,GAND;;AAQA,SAAO,CAAC,IAAI,OAAL,MAAkB,CAAzB,EAA4B;AAC1B,SAAK,EAAL;;;AAGA,eAAW,IAAI,IAAI,EAAR,CAAX;;;AAGA,SAAK,CAAL,IAAU,KAAV,EAAiB;AACf,aAAO,MAAM,CAAN,EAAS,QAAT,CAAkB,CAAlB,CAAP;AACA,aAAO,KAAK,MAAL,GAAc,CAArB,EAAwB;AACtB,eAAO,MAAM,IAAb;AACD;AACD,cAAQ,IAAR;AACD;;AAED,WAAO,KAAK,MAAL,GAAc,CAArB,EAAwB;AACtB,aAAO,OAAO,GAAd;AACD;;AAED,SAAK,IAAI,CAAT,EAAY,KAAM,KAAK,MAAL,GAAc,CAAf,GAAoB,CAArC,EAAwC,GAAxC,EAA6C;AAC3C,aAAO,KAAK,MAAL,CAAY,CAAZ,EAAe,CAAf,CAAP;AACA,UAAI,SAAS,QAAb,EAAuB;AACrB,mBAAW,IAAI,EAAJ,CAAX;AACD,OAFD,MAEO;AACL,mBAAW,IAAI,SAAS,IAAT,EAAe,CAAf,IAAoB,EAAxB,CAAX;AACD;AACD,WAAK,CAAL;AACD;AACD,QAAI,CAAJ;AACA,WAAO,EAAP;AACA,eAAW,IAAX;AACD;;;AAGD,aAAW,IAAI,EAAJ,IAAU,IAArB;;AAEA,SAAO,OAAP;AACD,CA5ED","file":"convert_uuencode.js","sourcesContent":["module.exports = function convert_uuencode (str) { // eslint-disable-line camelcase\n  //       discuss at: http://locutus.io/php/convert_uuencode/\n  //      original by: Ole Vrijenhoek\n  //      bugfixed by: Kevin van Zonneveld (http://kvz.io)\n  //      bugfixed by: Brett Zamir (http://brett-zamir.me)\n  // reimplemented by: Ole Vrijenhoek\n  //        example 1: convert_uuencode(\"test\\ntext text\\r\\n\")\n  //        returns 1: \"0=&5S=`IT97AT('1E>'0-\\\"@\\n`\\n\"\n\n  var isScalar = require('../var/is_scalar')\n\n  var chr = function (c) {\n    return String.fromCharCode(c)\n  }\n\n  if (!str || str === '') {\n    return chr(0)\n  } else if (!isScalar(str)) {\n    return false\n  }\n\n  var c = 0\n  var u = 0\n  var i = 0\n  var a = 0\n  var encoded = ''\n  var tmp1 = ''\n  var tmp2 = ''\n  var bytes = {}\n\n  // divide string into chunks of 45 characters\n  var chunk = function () {\n    bytes = str.substr(u, 45).split('')\n    for (i in bytes) {\n      bytes[i] = bytes[i].charCodeAt(0)\n    }\n    return bytes.length || 0\n  }\n\n  while ((c = chunk()) !== 0) {\n    u += 45\n\n    // New line encoded data starts with number of bytes encoded.\n    encoded += chr(c + 32)\n\n    // Convert each char in bytes[] to a byte\n    for (i in bytes) {\n      tmp1 = bytes[i].toString(2)\n      while (tmp1.length < 8) {\n        tmp1 = '0' + tmp1\n      }\n      tmp2 += tmp1\n    }\n\n    while (tmp2.length % 6) {\n      tmp2 = tmp2 + '0'\n    }\n\n    for (i = 0; i <= (tmp2.length / 6) - 1; i++) {\n      tmp1 = tmp2.substr(a, 6)\n      if (tmp1 === '000000') {\n        encoded += chr(96)\n      } else {\n        encoded += chr(parseInt(tmp1, 2) + 32)\n      }\n      a += 6\n    }\n    a = 0\n    tmp2 = ''\n    encoded += '\\n'\n  }\n\n  // Add termination characters\n  encoded += chr(96) + '\\n'\n\n  return encoded\n}\n"]}