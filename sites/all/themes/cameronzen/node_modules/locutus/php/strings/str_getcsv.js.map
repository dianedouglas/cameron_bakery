{"version":3,"sources":["../../../src/php/strings/str_getcsv.js"],"names":[],"mappings":";;AAAA,OAAO,OAAP,GAAiB,SAAS,UAAT,CAAqB,KAArB,EAA4B,SAA5B,EAAuC,SAAvC,EAAkD,MAAlD,EAA0D;;;;;;;;;;;;;;;;;;;;;;AAyBzE,MAAI,CAAJ;AACA,MAAI,MAAJ;AACA,MAAI,SAAS,EAAb;AACA,MAAI,aAAa,SAAb,UAAa,CAAU,GAAV,EAAe;;;AAG9B,WAAO,IAAI,KAAJ,CAAU,EAAV,EAAc,OAAd,GAAwB,IAAxB,CAA6B,EAA7B,CAAP;AACD,GAJD;AAKA,MAAI,MAAM,SAAN,GAAM,CAAU,GAAV,EAAe;;AAEvB,WAAO,OAAO,GAAP,EAAY,OAAZ,CAAoB,wCAApB,EAA8D,MAA9D,CAAP;AACD,GAHD;;AAKA,cAAY,aAAa,GAAzB;AACA,cAAY,aAAa,GAAzB;AACA,WAAS,UAAU,IAAnB;AACA,MAAI,QAAQ,IAAI,SAAJ,CAAZ;AACA,MAAI,QAAQ,IAAI,MAAJ,CAAZ;;AAEA,UAAQ,MACL,OADK,CACG,IAAI,MAAJ,CAAW,UAAU,KAArB,CADH,EACgC,EADhC,EAEL,OAFK,CAEG,IAAI,MAAJ,CAAW,QAAQ,OAAnB,CAFH,EAEgC,EAFhC,CAAR;;;AAKA,UAAQ,WAAW,KAAX,EACL,KADK,CACC,IAAI,MAAJ,CAAW,QAAQ,MAAR,GAAiB,IAAI,SAAJ,CAAjB,GAAkC,MAAlC,GAA2C,KAA3C,GAAmD,KAAnD,GAA2D,KAA3D,GAAmE,GAA9E,EAAmF,GAAnF,CADD,EAEL,OAFK,EAAR;;AAIA,OAAK,IAAI,CAAJ,EAAO,SAAS,MAAM,MAA3B,EAAmC,IAAI,MAAvC,EAA+C,GAA/C,EAAoD;AAClD,WAAO,IAAP,CAAY,WAAW,MAAM,CAAN,CAAX,EACT,OADS,CACD,IAAI,MAAJ,CAAW,QAAQ,KAAnB,EAA0B,GAA1B,CADC,EAC+B,SAD/B,CAAZ;AAED;;AAED,SAAO,MAAP;AACD,CA3DD","file":"str_getcsv.js","sourcesContent":["module.exports = function str_getcsv (input, delimiter, enclosure, escape) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/str_getcsv/\n  // original by: Brett Zamir (http://brett-zamir.me)\n  //   example 1: str_getcsv('\"abc\",\"def\",\"ghi\"')\n  //   returns 1: ['abc', 'def', 'ghi']\n  //   example 2: str_getcsv('\"row2\"\"cell1\",\"row2cell2\",\"row2cell3\"', null, null, '\"')\n  //   returns 2: ['row2\"cell1', 'row2cell2', 'row2cell3']\n\n  /*\n  // These test cases allowing for missing delimiters are not currently supported\n    str_getcsv('\"row2\"\"cell1\",row2cell2,row2cell3', null, null, '\"');\n    ['row2\"cell1', 'row2cell2', 'row2cell3']\n\n    str_getcsv('row1cell1,\"row1,cell2\",row1cell3', null, null, '\"');\n    ['row1cell1', 'row1,cell2', 'row1cell3']\n\n    str_getcsv('\"row2\"\"cell1\",row2cell2,\"row2\"\"\"\"cell3\"');\n    ['row2\"cell1', 'row2cell2', 'row2\"\"cell3']\n\n    str_getcsv('row1cell1,\"row1,cell2\",\"row1\"\",\"\"cell3\"', null, null, '\"');\n    ['row1cell1', 'row1,cell2', 'row1\",\"cell3'];\n\n    Should also test newlines within\n  */\n\n  var i\n  var inpLen\n  var output = []\n  var _backwards = function (str) {\n    // We need to go backwards to simulate negative look-behind (don't split on\n    // an escaped enclosure even if followed by the delimiter and another enclosure mark)\n    return str.split('').reverse().join('')\n  }\n  var _pq = function (str) {\n    // preg_quote()\n    return String(str).replace(/([\\\\\\.\\+\\*\\?\\[\\^\\]\\$\\(\\)\\{\\}=!<>\\|:])/g, '\\\\$1')\n  }\n\n  delimiter = delimiter || ','\n  enclosure = enclosure || '\"'\n  escape = escape || '\\\\'\n  var pqEnc = _pq(enclosure)\n  var pqEsc = _pq(escape)\n\n  input = input\n    .replace(new RegExp('^\\\\s*' + pqEnc), '')\n    .replace(new RegExp(pqEnc + '\\\\s*$'), '')\n\n  // PHP behavior may differ by including whitespace even outside of the enclosure\n  input = _backwards(input)\n    .split(new RegExp(pqEnc + '\\\\s*' + _pq(delimiter) + '\\\\s*' + pqEnc + '(?!' + pqEsc + ')', 'g'))\n    .reverse()\n\n  for (i = 0, inpLen = input.length; i < inpLen; i++) {\n    output.push(_backwards(input[i])\n      .replace(new RegExp(pqEsc + pqEnc, 'g'), enclosure))\n  }\n\n  return output\n}\n"]}