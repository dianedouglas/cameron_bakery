{"version":3,"sources":["../../../src/php/strings/str_word_count.js"],"names":[],"mappings":"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","file":"str_word_count.js","sourcesContent":["module.exports = function str_word_count (str, format, charlist) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/str_word_count/\n  // original by: Ole Vrijenhoek\n  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n  // bugfixed by: Brett Zamir (http://brett-zamir.me)\n  // bugfixed by: Brett Zamir (http://brett-zamir.me)\n  //    input by: Bug?\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  //   example 1: str_word_count(\"Hello fri3nd, you're\\r\\n       looking          good today!\", 1)\n  //   returns 1: ['Hello', 'fri', 'nd', \"you're\", 'looking', 'good', 'today']\n  //   example 2: str_word_count(\"Hello fri3nd, you're\\r\\n       looking          good today!\", 2)\n  //   returns 2: {0: 'Hello', 6: 'fri', 10: 'nd', 14: \"you're\", 29: 'looking', 46: 'good', 51: 'today'}\n  //   example 3: str_word_count(\"Hello fri3nd, you're\\r\\n       looking          good today!\", 1, '\\u00e0\\u00e1\\u00e3\\u00e73')\n  //   returns 3: ['Hello', 'fri3nd', \"you're\", 'looking', 'good', 'today']\n  //   example 4: str_word_count('hey', 2)\n  //   returns 4: {0: 'hey'}\n\n  var ctypeAlpha = require('../ctype/ctype_alpha')\n  var len = str.length\n  var cl = charlist && charlist.length\n  var chr = ''\n  var tmpStr = ''\n  var i = 0\n  var c = ''\n  var wArr = []\n  var wC = 0\n  var assoc = {}\n  var aC = 0\n  var reg = ''\n  var match = false\n\n  var _pregQuote = function (str) {\n    return (str + '').replace(/([\\\\\\.\\+\\*\\?\\[\\^\\]\\$\\(\\)\\{\\}=!<>\\|:])/g, '\\\\$1')\n  }\n  var _getWholeChar = function (str, i) {\n    // Use for rare cases of non-BMP characters\n    var code = str.charCodeAt(i)\n    if (code < 0xD800 || code > 0xDFFF) {\n      return str.charAt(i)\n    }\n    if (code >= 0xD800 && code <= 0xDBFF) {\n      // High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single\n      // characters)\n      if (str.length <= (i + 1)) {\n        throw new Error('High surrogate without following low surrogate')\n      }\n      var next = str.charCodeAt(i + 1)\n      if (next < 0xDC00 || next > 0xDFFF) {\n        throw new Error('High surrogate without following low surrogate')\n      }\n      return str.charAt(i) + str.charAt(i + 1)\n    }\n    // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n    if (i === 0) {\n      throw new Error('Low surrogate without preceding high surrogate')\n    }\n    var prev = str.charCodeAt(i - 1)\n    if (prev < 0xD800 || prev > 0xDBFF) {\n      // (could change last hex to 0xDB7F to treat high private surrogates as single characters)\n      throw new Error('Low surrogate without preceding high surrogate')\n    }\n    // We can pass over low surrogates now as the second component in a pair which we have already\n    // processed\n    return false\n  }\n\n  if (cl) {\n    reg = '^(' + _pregQuote(_getWholeChar(charlist, 0))\n    for (i = 1; i < cl; i++) {\n      if ((chr = _getWholeChar(charlist, i)) === false) {\n        continue\n      }\n      reg += '|' + _pregQuote(chr)\n    }\n    reg += ')$'\n    reg = new RegExp(reg)\n  }\n\n  for (i = 0; i < len; i++) {\n    if ((c = _getWholeChar(str, i)) === false) {\n      continue\n    }\n    // No hyphen at beginning or end unless allowed in charlist (or locale)\n    // No apostrophe at beginning unless allowed in charlist (or locale)\n    // @todo: Make this more readable\n    match = ctypeAlpha(c) ||\n      (reg && c.search(reg) !== -1) ||\n      ((i !== 0 && i !== len - 1) && c === '-') ||\n      (i !== 0 && c === \"'\")\n    if (match) {\n      if (tmpStr === '' && format === 2) {\n        aC = i\n      }\n      tmpStr = tmpStr + c\n    }\n    if (i === len - 1 || !match && tmpStr !== '') {\n      if (format !== 2) {\n        wArr[wArr.length] = tmpStr\n      } else {\n        assoc[aC] = tmpStr\n      }\n      tmpStr = ''\n      wC++\n    }\n  }\n\n  if (!format) {\n    return wC\n  } else if (format === 1) {\n    return wArr\n  } else if (format === 2) {\n    return assoc\n  }\n\n  throw new Error('You have supplied an incorrect format')\n}\n"]}