{"version":3,"sources":["../../../src/php/array/array_slice.js"],"names":[],"mappings":";;AAAA,OAAO,OAAP,GAAiB,SAAS,WAAT,CAAsB,GAAtB,EAA2B,KAA3B,EAAkC,IAAlC,EAAwC,YAAxC,EAAsD;;;;;;;;;;;;AAWrE,MAAI,QAAQ,QAAQ,eAAR,CAAZ;;;;;;;;AAQA,MAAI,MAAM,EAAV;;AAEA,MAAI,OAAO,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,GAA/B,MAAwC,gBAAxC,IAA6D,gBAAgB,UAAU,CAA3F,EAA+F;;AAE7F,QAAI,MAAM,CAAV;AACA,QAAI,WAAW,EAAf;AACA,SAAK,GAAL,IAAY,GAAZ,EAAiB;AACf,aAAO,CAAP;AACA,eAAS,GAAT,IAAgB,IAAI,GAAJ,CAAhB;AACD;AACD,UAAM,QAAN;;AAEA,YAAS,QAAQ,CAAT,GAAc,MAAM,KAApB,GAA4B,KAApC;AACA,WAAO,SAAS,SAAT,GAAqB,GAArB,GAA4B,OAAO,CAAR,GAAa,MAAM,IAAN,GAAa,KAA1B,GAAkC,IAApE;;AAEA,QAAI,QAAQ,EAAZ;AACA,QAAI,QAAQ,KAAZ;AACA,QAAI,KAAK,CAAC,CAAV;AACA,QAAI,UAAU,CAAd;AACA,QAAI,UAAU,CAAd;;AAEA,SAAK,GAAL,IAAY,GAAZ,EAAiB;AACf,QAAE,EAAF;AACA,UAAI,WAAW,IAAf,EAAqB;AACnB;AACD;AACD,UAAI,OAAO,KAAX,EAAkB;AAChB,gBAAQ,IAAR;AACD;AACD,UAAI,CAAC,KAAL,EAAY;AACV;AACD,SAAE,OAAF;AACD,UAAI,MAAM,GAAN,KAAc,CAAC,YAAnB,EAAiC;AAC/B,cAAM,SAAN,IAAmB,IAAI,GAAJ,CAAnB;AACD,OAFD,MAEO;AACL,cAAM,GAAN,IAAa,IAAI,GAAJ,CAAb;AACD;AACF;;;AAGD,WAAO,KAAP;AACD;;AAED,MAAI,SAAS,SAAb,EAAwB;AACtB,WAAO,IAAI,KAAJ,CAAU,KAAV,CAAP;AACD,GAFD,MAEO,IAAI,QAAQ,CAAZ,EAAe;AACpB,WAAO,IAAI,KAAJ,CAAU,KAAV,EAAiB,QAAQ,IAAzB,CAAP;AACD,GAFM,MAEA;AACL,WAAO,IAAI,KAAJ,CAAU,KAAV,EAAiB,IAAjB,CAAP;AACD;AACF,CArED","file":"array_slice.js","sourcesContent":["module.exports = function array_slice (arr, offst, lgth, preserveKeys) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/array_slice/\n  // original by: Brett Zamir (http://brett-zamir.me)\n  //    input by: Brett Zamir (http://brett-zamir.me)\n  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n  //      note 1: Relies on is_int because !isNaN accepts floats\n  //   example 1: array_slice([\"a\", \"b\", \"c\", \"d\", \"e\"], 2, -1)\n  //   returns 1: [ 'c', 'd' ]\n  //   example 2: array_slice([\"a\", \"b\", \"c\", \"d\", \"e\"], 2, -1, true)\n  //   returns 2: {2: 'c', 3: 'd'}\n\n  var isInt = require('../var/is_int')\n\n  /*\n    if ('callee' in arr && 'length' in arr) {\n      arr = Array.prototype.slice.call(arr);\n    }\n  */\n\n  var key = ''\n\n  if (Object.prototype.toString.call(arr) !== '[object Array]' || (preserveKeys && offst !== 0)) {\n    // Assoc. array as input or if required as output\n    var lgt = 0\n    var newAssoc = {}\n    for (key in arr) {\n      lgt += 1\n      newAssoc[key] = arr[key]\n    }\n    arr = newAssoc\n\n    offst = (offst < 0) ? lgt + offst : offst\n    lgth = lgth === undefined ? lgt : (lgth < 0) ? lgt + lgth - offst : lgth\n\n    var assoc = {}\n    var start = false\n    var it = -1\n    var arrlgth = 0\n    var noPkIdx = 0\n\n    for (key in arr) {\n      ++it\n      if (arrlgth >= lgth) {\n        break\n      }\n      if (it === offst) {\n        start = true\n      }\n      if (!start) {\n        continue\n      }++arrlgth\n      if (isInt(key) && !preserveKeys) {\n        assoc[noPkIdx++] = arr[key]\n      } else {\n        assoc[key] = arr[key]\n      }\n    }\n    // Make as array-like object (though length will not be dynamic)\n    // assoc.length = arrlgth;\n    return assoc\n  }\n\n  if (lgth === undefined) {\n    return arr.slice(offst)\n  } else if (lgth >= 0) {\n    return arr.slice(offst, offst + lgth)\n  } else {\n    return arr.slice(offst, lgth)\n  }\n}\n"]}