{"version":3,"sources":["../../../src/php/array/asort.js"],"names":[],"mappings":"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","file":"asort.js","sourcesContent":["module.exports = function asort (inputArr, sortFlags) {\n  //  discuss at: http://locutus.io/php/asort/\n  // original by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Theriault (https://github.com/Theriault)\n  //    input by: paulo kuong\n  // bugfixed by: Adam Wallner (http://web2.bitbaro.hu/)\n  //      note 1: SORT_STRING (as well as natsort and natcasesort) might also be\n  //      note 1: integrated into all of these functions by adapting the code at\n  //      note 1: http://sourcefrog.net/projects/natsort/natcompare.js\n  //      note 1: The examples are correct, this is a new way\n  //      note 1: Credits to: http://javascript.internet.com/math-related/bubble-sort.html\n  //      note 1: This function deviates from PHP in returning a copy of the array instead\n  //      note 1: of acting by reference and returning true; this was necessary because\n  //      note 1: IE does not allow deleting and re-adding of properties without caching\n  //      note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to\n  //      note 1: get the PHP behavior, but use this only if you are in an environment\n  //      note 1: such as Firefox extensions where for-in iteration order is fixed and true\n  //      note 1: property deletion is supported. Note that we intend to implement the PHP\n  //      note 1: behavior by default if IE ever does allow it; only gives shallow copy since\n  //      note 1: is by reference in PHP anyways\n  //      note 1: Since JS objects' keys are always strings, and (the\n  //      note 1: default) SORT_REGULAR flag distinguishes by key type,\n  //      note 1: if the content is a numeric string, we treat the\n  //      note 1: \"original type\" as numeric.\n  //   example 1: var $data = {d: 'lemon', a: 'orange', b: 'banana', c: 'apple'}\n  //   example 1: asort($data)\n  //   example 1: var $result = $data\n  //   returns 1: {c: 'apple', b: 'banana', d: 'lemon', a: 'orange'}\n  //   example 2: ini_set('locutus.sortByReference', true)\n  //   example 2: var $data = {d: 'lemon', a: 'orange', b: 'banana', c: 'apple'}\n  //   example 2: asort($data)\n  //   example 2: var $result = $data\n  //   returns 2: {c: 'apple', b: 'banana', d: 'lemon', a: 'orange'}\n\n  var strnatcmp = require('../strings/strnatcmp')\n  var i18nlgd = require('../i18n/i18n_loc_get_default')\n\n  var valArr = []\n  var valArrLen = 0\n  var k\n  var i\n  var sorter\n  var sortByReference = false\n  var populateArr = {}\n\n  var $global = (typeof window !== 'undefined' ? window : global)\n  $global.$locutus = $global.$locutus || {}\n  var $locutus = $global.$locutus\n  $locutus.php = $locutus.php || {}\n  $locutus.php.locales = $locutus.php.locales || {}\n\n  switch (sortFlags) {\n    case 'SORT_STRING':\n      // compare items as strings\n      sorter = function (a, b) {\n        return strnatcmp(a, b)\n      }\n      break\n    case 'SORT_LOCALE_STRING':\n      // compare items as strings, based on the current locale\n      // (set with i18n_loc_set_default() as of PHP6)\n      var loc = i18nlgd()\n      sorter = $locutus.php.locales[loc].sorting\n      break\n    case 'SORT_NUMERIC':\n      // compare items numerically\n      sorter = function (a, b) {\n        return (a - b)\n      }\n      break\n    case 'SORT_REGULAR':\n      // compare items normally (don't change types)\n      break\n    default:\n      sorter = function (a, b) {\n        var aFloat = parseFloat(a)\n        var bFloat = parseFloat(b)\n        var aNumeric = aFloat + '' === a\n        var bNumeric = bFloat + '' === b\n        if (aNumeric && bNumeric) {\n          return aFloat > bFloat ? 1 : aFloat < bFloat ? -1 : 0\n        } else if (aNumeric && !bNumeric) {\n          return 1\n        } else if (!aNumeric && bNumeric) {\n          return -1\n        }\n        return a > b ? 1 : a < b ? -1 : 0\n      }\n      break\n  }\n\n  var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on'\n  sortByReference = iniVal === 'on'\n  populateArr = sortByReference ? inputArr : populateArr\n\n  // Get key and value arrays\n  for (k in inputArr) {\n    if (inputArr.hasOwnProperty(k)) {\n      valArr.push([k, inputArr[k]])\n      if (sortByReference) {\n        delete inputArr[k]\n      }\n    }\n  }\n\n  valArr.sort(function (a, b) {\n    return sorter(a[1], b[1])\n  })\n\n  // Repopulate the old array\n  for (i = 0, valArrLen = valArr.length; i < valArrLen; i++) {\n    populateArr[valArr[i][0]] = valArr[i][1]\n  }\n\n  return sortByReference || populateArr\n}\n"]}