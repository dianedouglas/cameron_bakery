{"version":3,"sources":["../../../src/php/array/uksort.js"],"names":[],"mappings":";;AAAA,OAAO,OAAP,GAAiB,SAAS,MAAT,CAAiB,QAAjB,EAA2B,MAA3B,EAAmC;;;;;;;;;;;;;;;;;;;AAmBlD,MAAI,SAAS,EAAb;AACA,MAAI,OAAO,EAAX;AACA,MAAI,IAAI,CAAR;AACA,MAAI,IAAI,EAAR;AACA,MAAI,kBAAkB,KAAtB;AACA,MAAI,cAAc,EAAlB;;AAEA,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,aAAS,KAAK,MAAL,CAAY,MAAZ,CAAT;AACD;;;AAGD,OAAK,CAAL,IAAU,QAAV,EAAoB;AAClB,QAAI,SAAS,cAAT,CAAwB,CAAxB,CAAJ,EAAgC;AAC9B,WAAK,IAAL,CAAU,CAAV;AACD;AACF;;;AAGD,MAAI;AACF,QAAI,MAAJ,EAAY;AACV,WAAK,IAAL,CAAU,MAAV;AACD,KAFD,MAEO;AACL,WAAK,IAAL;AACD;AACF,GAND,CAME,OAAO,CAAP,EAAU;AACV,WAAO,KAAP;AACD;;AAED,MAAI,SAAS,CAAC,OAAO,OAAP,KAAmB,WAAnB,GAAiC,QAAQ,iBAAR,EAA2B,yBAA3B,CAAjC,GAAyF,SAA1F,KAAwG,IAArH;AACA,oBAAkB,WAAW,IAA7B;AACA,gBAAc,kBAAkB,QAAlB,GAA6B,WAA3C;;;AAGA,OAAK,IAAI,CAAT,EAAY,IAAI,KAAK,MAArB,EAA6B,GAA7B,EAAkC;AAChC,QAAI,KAAK,CAAL,CAAJ;AACA,WAAO,CAAP,IAAY,SAAS,CAAT,CAAZ;AACA,QAAI,eAAJ,EAAqB;AACnB,aAAO,SAAS,CAAT,CAAP;AACD;AACF;AACD,OAAK,CAAL,IAAU,MAAV,EAAkB;AAChB,QAAI,OAAO,cAAP,CAAsB,CAAtB,CAAJ,EAA8B;AAC5B,kBAAY,CAAZ,IAAiB,OAAO,CAAP,CAAjB;AACD;AACF;;AAED,SAAO,mBAAmB,WAA1B;AACD,CAnED","file":"uksort.js","sourcesContent":["module.exports = function uksort (inputArr, sorter) {\n  //  discuss at: http://locutus.io/php/uksort/\n  // original by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  //      note 1: The examples are correct, this is a new way\n  //      note 1: This function deviates from PHP in returning a copy of the array instead\n  //      note 1: of acting by reference and returning true; this was necessary because\n  //      note 1: IE does not allow deleting and re-adding of properties without caching\n  //      note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to\n  //      note 1: get the PHP behavior, but use this only if you are in an environment\n  //      note 1: such as Firefox extensions where for-in iteration order is fixed and true\n  //      note 1: property deletion is supported. Note that we intend to implement the PHP\n  //      note 1: behavior by default if IE ever does allow it; only gives shallow copy since\n  //      note 1: is by reference in PHP anyways\n  //   example 1: var $data = {d: 'lemon', a: 'orange', b: 'banana', c: 'apple'}\n  //   example 1: uksort($data, function (key1, key2){ return (key1 === key2 ? 0 : (key1 > key2 ? 1 : -1)); })\n  //   example 1: var $result = $data\n  //   returns 1: {a: 'orange', b: 'banana', c: 'apple', d: 'lemon'}\n\n  var tmpArr = {}\n  var keys = []\n  var i = 0\n  var k = ''\n  var sortByReference = false\n  var populateArr = {}\n\n  if (typeof sorter === 'string') {\n    sorter = this.window[sorter]\n  }\n\n  // Make a list of key names\n  for (k in inputArr) {\n    if (inputArr.hasOwnProperty(k)) {\n      keys.push(k)\n    }\n  }\n\n  // Sort key names\n  try {\n    if (sorter) {\n      keys.sort(sorter)\n    } else {\n      keys.sort()\n    }\n  } catch (e) {\n    return false\n  }\n\n  var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on'\n  sortByReference = iniVal === 'on'\n  populateArr = sortByReference ? inputArr : populateArr\n\n  // Rebuild array with sorted key names\n  for (i = 0; i < keys.length; i++) {\n    k = keys[i]\n    tmpArr[k] = inputArr[k]\n    if (sortByReference) {\n      delete inputArr[k]\n    }\n  }\n  for (i in tmpArr) {\n    if (tmpArr.hasOwnProperty(i)) {\n      populateArr[i] = tmpArr[i]\n    }\n  }\n\n  return sortByReference || populateArr\n}\n"]}