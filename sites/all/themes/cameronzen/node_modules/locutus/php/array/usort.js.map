{"version":3,"sources":["../../../src/php/array/usort.js"],"names":[],"mappings":";;AAAA,OAAO,OAAP,GAAiB,SAAS,KAAT,CAAgB,QAAhB,EAA0B,MAA1B,EAAkC;;;;;;;;;;;;;;;;;;AAkBjD,MAAI,SAAS,EAAb;AACA,MAAI,IAAI,EAAR;AACA,MAAI,IAAI,CAAR;AACA,MAAI,kBAAkB,KAAtB;AACA,MAAI,cAAc,EAAlB;;AAEA,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,aAAS,KAAK,MAAL,CAAT;AACD,GAFD,MAEO,IAAI,OAAO,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,MAA/B,MAA2C,gBAA/C,EAAiE;AACtE,aAAS,KAAK,OAAO,CAAP,CAAL,EAAgB,OAAO,CAAP,CAAhB,CAAT;AACD;;AAED,MAAI,SAAS,CAAC,OAAO,OAAP,KAAmB,WAAnB,GAAiC,QAAQ,iBAAR,EAA2B,yBAA3B,CAAjC,GAAyF,SAA1F,KAAwG,IAArH;AACA,oBAAkB,WAAW,IAA7B;AACA,gBAAc,kBAAkB,QAAlB,GAA6B,WAA3C;;AAEA,OAAK,CAAL,IAAU,QAAV,EAAoB;;AAElB,QAAI,SAAS,cAAT,CAAwB,CAAxB,CAAJ,EAAgC;AAC9B,aAAO,IAAP,CAAY,SAAS,CAAT,CAAZ;AACA,UAAI,eAAJ,EAAqB;AACnB,eAAO,SAAS,CAAT,CAAP;AACD;AACF;AACF;AACD,MAAI;AACF,WAAO,IAAP,CAAY,MAAZ;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACD,OAAK,IAAI,CAAT,EAAY,IAAI,OAAO,MAAvB,EAA+B,GAA/B,EAAoC;;AAElC,gBAAY,CAAZ,IAAiB,OAAO,CAAP,CAAjB;AACD;;AAED,SAAO,mBAAmB,WAA1B;AACD,CAtDD","file":"usort.js","sourcesContent":["module.exports = function usort (inputArr, sorter) {\n  //  discuss at: http://locutus.io/php/usort/\n  // original by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  //      note 1: This function deviates from PHP in returning a copy of the array instead\n  //      note 1: of acting by reference and returning true; this was necessary because\n  //      note 1: IE does not allow deleting and re-adding of properties without caching\n  //      note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to\n  //      note 1: get the PHP behavior, but use this only if you are in an environment\n  //      note 1: such as Firefox extensions where for-in iteration order is fixed and true\n  //      note 1: property deletion is supported. Note that we intend to implement the PHP\n  //      note 1: behavior by default if IE ever does allow it; only gives shallow copy since\n  //      note 1: is by reference in PHP anyways\n  //   example 1: var $stuff = {d: '3', a: '1', b: '11', c: '4'}\n  //   example 1: usort($stuff, function (a, b) { return (a - b) })\n  //   example 1: var $result = $stuff\n  //   returns 1: {0: '1', 1: '3', 2: '4', 3: '11'}\n\n  var valArr = []\n  var k = ''\n  var i = 0\n  var sortByReference = false\n  var populateArr = {}\n\n  if (typeof sorter === 'string') {\n    sorter = this[sorter]\n  } else if (Object.prototype.toString.call(sorter) === '[object Array]') {\n    sorter = this[sorter[0]][sorter[1]]\n  }\n\n  var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on'\n  sortByReference = iniVal === 'on'\n  populateArr = sortByReference ? inputArr : populateArr\n\n  for (k in inputArr) {\n    // Get key and value arrays\n    if (inputArr.hasOwnProperty(k)) {\n      valArr.push(inputArr[k])\n      if (sortByReference) {\n        delete inputArr[k]\n      }\n    }\n  }\n  try {\n    valArr.sort(sorter)\n  } catch (e) {\n    return false\n  }\n  for (i = 0; i < valArr.length; i++) {\n    // Repopulate the old array\n    populateArr[i] = valArr[i]\n  }\n\n  return sortByReference || populateArr\n}\n"]}