{"version":3,"sources":["../../../src/php/array/krsort.js"],"names":[],"mappings":";;AAAA,OAAO,OAAP,GAAiB,SAAS,MAAT,CAAiB,QAAjB,EAA2B,SAA3B,EAAsC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BrD,MAAI,UAAU,QAAQ,8BAAR,CAAd;AACA,MAAI,YAAY,QAAQ,sBAAR,CAAhB;;AAEA,MAAI,SAAS,EAAb;AACA,MAAI,OAAO,EAAX;AACA,MAAI,MAAJ;AACA,MAAI,CAAJ;AACA,MAAI,CAAJ;AACA,MAAI,kBAAkB,KAAtB;AACA,MAAI,cAAc,EAAlB;;AAEA,MAAI,UAAW,OAAO,MAAP,KAAkB,WAAlB,GAAgC,MAAhC,GAAyC,MAAxD;AACA,UAAQ,QAAR,GAAmB,QAAQ,QAAR,IAAoB,EAAvC;AACA,MAAI,WAAW,QAAQ,QAAvB;AACA,WAAS,GAAT,GAAe,SAAS,GAAT,IAAgB,EAA/B;AACA,WAAS,GAAT,CAAa,OAAb,GAAuB,SAAS,GAAT,CAAa,OAAb,IAAwB,EAA/C;;AAEA,UAAQ,SAAR;AACE,SAAK,aAAL;;AAEE,eAAS,gBAAU,CAAV,EAAa,CAAb,EAAgB;AACvB,eAAO,UAAU,CAAV,EAAa,CAAb,CAAP;AACD,OAFD;AAGA;AACF,SAAK,oBAAL;;;AAGE,UAAI,MAAM,SAAV;AACA,eAAS,SAAS,OAAT,CAAiB,GAAjB,EAAsB,OAA/B;AACA;AACF,SAAK,cAAL;;AAEE,eAAS,gBAAU,CAAV,EAAa,CAAb,EAAgB;AACvB,eAAQ,IAAI,CAAZ;AACD,OAFD;AAGA;AACF,SAAK,cAAL;AACA;;AAEE,eAAS,gBAAU,CAAV,EAAa,CAAb,EAAgB;AACvB,YAAI,SAAS,WAAW,CAAX,CAAb;AACA,YAAI,SAAS,WAAW,CAAX,CAAb;AACA,YAAI,WAAW,SAAS,EAAT,KAAgB,CAA/B;AACA,YAAI,WAAW,SAAS,EAAT,KAAgB,CAA/B;AACA,YAAI,YAAY,QAAhB,EAA0B;AACxB,iBAAO,SAAS,MAAT,GAAkB,CAAlB,GAAsB,SAAS,MAAT,GAAkB,CAAC,CAAnB,GAAuB,CAApD;AACD,SAFD,MAEO,IAAI,YAAY,CAAC,QAAjB,EAA2B;AAChC,iBAAO,CAAP;AACD,SAFM,MAEA,IAAI,CAAC,QAAD,IAAa,QAAjB,EAA2B;AAChC,iBAAO,CAAC,CAAR;AACD;AACD,eAAO,IAAI,CAAJ,GAAQ,CAAR,GAAY,IAAI,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAAhC;AACD,OAbD;AAcA;AApCJ;;;AAwCA,OAAK,CAAL,IAAU,QAAV,EAAoB;AAClB,QAAI,SAAS,cAAT,CAAwB,CAAxB,CAAJ,EAAgC;AAC9B,WAAK,IAAL,CAAU,CAAV;AACD;AACF;AACD,OAAK,IAAL,CAAU,MAAV;;AAEA,MAAI,SAAS,CAAC,OAAO,OAAP,KAAmB,WAAnB,GAAiC,QAAQ,iBAAR,EAA2B,yBAA3B,CAAjC,GAAyF,SAA1F,KAAwG,IAArH;AACA,oBAAkB,WAAW,IAA7B;AACA,gBAAc,kBAAkB,QAAlB,GAA6B,WAA3C;;;AAGA,OAAK,IAAI,CAAT,EAAY,IAAI,KAAK,MAArB,EAA6B,GAA7B,EAAkC;AAChC,QAAI,KAAK,CAAL,CAAJ;AACA,WAAO,CAAP,IAAY,SAAS,CAAT,CAAZ;AACA,QAAI,eAAJ,EAAqB;AACnB,aAAO,SAAS,CAAT,CAAP;AACD;AACF;AACD,OAAK,CAAL,IAAU,MAAV,EAAkB;AAChB,QAAI,OAAO,cAAP,CAAsB,CAAtB,CAAJ,EAA8B;AAC5B,kBAAY,CAAZ,IAAiB,OAAO,CAAP,CAAjB;AACD;AACF;;AAED,SAAO,mBAAmB,WAA1B;AACD,CAjHD","file":"krsort.js","sourcesContent":["module.exports = function krsort (inputArr, sortFlags) {\n  //  discuss at: http://locutus.io/php/krsort/\n  // original by: GeekFG (http://geekfg.blogspot.com)\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  // bugfixed by: pseudaria (https://github.com/pseudaria)\n  //      note 1: The examples are correct, this is a new way\n  //      note 1: This function deviates from PHP in returning a copy of the array instead\n  //      note 1: of acting by reference and returning true; this was necessary because\n  //      note 1: IE does not allow deleting and re-adding of properties without caching\n  //      note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to\n  //      note 1: get the PHP behavior, but use this only if you are in an environment\n  //      note 1: such as Firefox extensions where for-in iteration order is fixed and true\n  //      note 1: property deletion is supported. Note that we intend to implement the PHP\n  //      note 1: behavior by default if IE ever does allow it; only gives shallow copy since\n  //      note 1: is by reference in PHP anyways\n  //      note 1: Since JS objects' keys are always strings, and (the\n  //      note 1: default) SORT_REGULAR flag distinguishes by key type,\n  //      note 1: if the content is a numeric string, we treat the\n  //      note 1: \"original type\" as numeric.\n  //   example 1: var $data = {d: 'lemon', a: 'orange', b: 'banana', c: 'apple'}\n  //   example 1: krsort($data)\n  //   example 1: var $result = $data\n  //   returns 1: {d: 'lemon', c: 'apple', b: 'banana', a: 'orange'}\n  //   example 2: ini_set('locutus.sortByReference', true)\n  //   example 2: var $data = {2: 'van', 3: 'Zonneveld', 1: 'Kevin'}\n  //   example 2: krsort($data)\n  //   example 2: var $result = $data\n  //   returns 2: {3: 'Zonneveld', 2: 'van', 1: 'Kevin'}\n\n  var i18nlgd = require('../i18n/i18n_loc_get_default')\n  var strnatcmp = require('../strings/strnatcmp')\n\n  var tmpArr = {}\n  var keys = []\n  var sorter\n  var i\n  var k\n  var sortByReference = false\n  var populateArr = {}\n\n  var $global = (typeof window !== 'undefined' ? window : global)\n  $global.$locutus = $global.$locutus || {}\n  var $locutus = $global.$locutus\n  $locutus.php = $locutus.php || {}\n  $locutus.php.locales = $locutus.php.locales || {}\n\n  switch (sortFlags) {\n    case 'SORT_STRING':\n      // compare items as strings\n      sorter = function (a, b) {\n        return strnatcmp(b, a)\n      }\n      break\n    case 'SORT_LOCALE_STRING':\n      // compare items as strings, based on the current locale\n      // (set with i18n_loc_set_default() as of PHP6)\n      var loc = i18nlgd()\n      sorter = $locutus.locales[loc].sorting\n      break\n    case 'SORT_NUMERIC':\n      // compare items numerically\n      sorter = function (a, b) {\n        return (b - a)\n      }\n      break\n    case 'SORT_REGULAR':\n    default:\n      // compare items normally (don't change types)\n      sorter = function (b, a) {\n        var aFloat = parseFloat(a)\n        var bFloat = parseFloat(b)\n        var aNumeric = aFloat + '' === a\n        var bNumeric = bFloat + '' === b\n        if (aNumeric && bNumeric) {\n          return aFloat > bFloat ? 1 : aFloat < bFloat ? -1 : 0\n        } else if (aNumeric && !bNumeric) {\n          return 1\n        } else if (!aNumeric && bNumeric) {\n          return -1\n        }\n        return a > b ? 1 : a < b ? -1 : 0\n      }\n      break\n  }\n\n  // Make a list of key names\n  for (k in inputArr) {\n    if (inputArr.hasOwnProperty(k)) {\n      keys.push(k)\n    }\n  }\n  keys.sort(sorter)\n\n  var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on'\n  sortByReference = iniVal === 'on'\n  populateArr = sortByReference ? inputArr : populateArr\n\n  // Rebuild array with sorted key names\n  for (i = 0; i < keys.length; i++) {\n    k = keys[i]\n    tmpArr[k] = inputArr[k]\n    if (sortByReference) {\n      delete inputArr[k]\n    }\n  }\n  for (i in tmpArr) {\n    if (tmpArr.hasOwnProperty(i)) {\n      populateArr[i] = tmpArr[i]\n    }\n  }\n\n  return sortByReference || populateArr\n}\n"]}