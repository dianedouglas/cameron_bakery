{"version":3,"sources":["../../../src/php/var/is_callable.js"],"names":[],"mappings":";;;;AAAA,OAAO,OAAP,GAAiB,SAAS,WAAT,CAAsB,QAAtB,EAAgC,UAAhC,EAA4C,YAA5C,EAA0D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BzE,MAAI,UAAW,OAAO,MAAP,KAAkB,WAAlB,GAAgC,MAAhC,GAAyC,MAAxD;;AAEA,MAAI,6BAA6B,kDAAjC;;AAEA,MAAI,OAAO,EAAX;AACA,MAAI,MAAM,EAAV;AACA,MAAI,SAAS,EAAb;AACA,MAAI,oBAAoB,KAAxB;;AAEA,MAAI,cAAc,SAAd,WAAc,CAAU,EAAV,EAAc;AAC9B,QAAI,OAAQ,8BAAD,CAAiC,IAAjC,CAAsC,EAAtC,CAAX;AACA,QAAI,CAAC,IAAL,EAAW;AACT,aAAO,aAAP;AACD;AACD,WAAO,KAAK,CAAL,CAAP;AACD,GAND;;AAQA,MAAI,OAAO,QAAP,KAAoB,QAAxB,EAAkC;AAChC,UAAM,OAAN;AACA,aAAS,QAAT;AACA,WAAO,QAAP;AACA,wBAAoB,CAAC,CAAC,KAAK,KAAL,CAAW,0BAAX,CAAtB;AACD,GALD,MAKO,IAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AACzC,WAAO,IAAP;AACD,GAFM,MAEA,IAAI,OAAO,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,QAA/B,MAA6C,gBAA7C,IACT,SAAS,MAAT,KAAoB,CADX,IAET,QAAO,SAAS,CAAT,CAAP,MAAuB,QAFd,IAGT,OAAO,SAAS,CAAT,CAAP,KAAuB,QAHlB,EAG4B;AACjC,UAAM,SAAS,CAAT,CAAN;AACA,aAAS,SAAS,CAAT,CAAT;AACA,WAAO,CAAC,IAAI,WAAJ,IAAmB,YAAY,IAAI,WAAhB,CAApB,IAAoD,IAApD,GAA2D,MAAlE;AACD,GAPM,MAOA;AACL,WAAO,KAAP;AACD;;AAED,MAAI,cAAc,OAAO,IAAI,MAAJ,CAAP,KAAuB,UAAzC,EAAqD;AACnD,QAAI,YAAJ,EAAkB;AAChB,cAAQ,YAAR,IAAwB,IAAxB;AACD;AACD,WAAO,IAAP;AACD;;;AAGD,MAAI,qBAAqB,OAAO,KAAK,MAAL,CAAP,KAAwB,UAAjD,EAA6D;;AAC3D,QAAI,YAAJ,EAAkB;AAChB,cAAQ,YAAR,IAAwB,IAAxB;AACD;AACD,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD,CA/ED","file":"is_callable.js","sourcesContent":["module.exports = function is_callable (mixedVar, syntaxOnly, callableName) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/is_callable/\n  // original by: Brett Zamir (http://brett-zamir.me)\n  //    input by: Fran√ßois\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  //      note 1: The variable callableName cannot work as a string variable passed by\n  //      note 1: reference as in PHP (since JavaScript does not support passing\n  //      note 1: strings by reference), but instead will take the name of\n  //      note 1: a global variable and set that instead.\n  //      note 1: When used on an object, depends on a constructor property\n  //      note 1: being kept on the object prototype\n  //      note 2: Depending on the `callableName` that is passed, this function can use eval.\n  //      note 2: The eval input is however checked to only allow valid function names,\n  //      note 2: So it should not be unsafer than uses without eval (seeing as you can)\n  //      note 2: already pass any function to be executed here.\n  //   example 1: is_callable('is_callable')\n  //   returns 1: true\n  //   example 2: is_callable('bogusFunction', true)\n  //   returns 2: true // gives true because does not do strict checking\n  //   example 3: function SomeClass () {}\n  //   example 3: SomeClass.prototype.someMethod = function (){}\n  //   example 3: var testObj = new SomeClass()\n  //   example 3: is_callable([testObj, 'someMethod'], true, 'myVar')\n  //   example 3: var $result = myVar\n  //   returns 3: 'SomeClass::someMethod'\n  //   example 4: is_callable(function () {})\n  //   returns 4: true\n\n  var $global = (typeof window !== 'undefined' ? window : global)\n\n  var validJSFunctionNamePattern = /^[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/\n\n  var name = ''\n  var obj = {}\n  var method = ''\n  var validFunctionName = false\n\n  var getFuncName = function (fn) {\n    var name = (/\\W*function\\s+([\\w\\$]+)\\s*\\(/).exec(fn)\n    if (!name) {\n      return '(Anonymous)'\n    }\n    return name[1]\n  }\n\n  if (typeof mixedVar === 'string') {\n    obj = $global\n    method = mixedVar\n    name = mixedVar\n    validFunctionName = !!name.match(validJSFunctionNamePattern)\n  } else if (typeof mixedVar === 'function') {\n    return true\n  } else if (Object.prototype.toString.call(mixedVar) === '[object Array]' &&\n    mixedVar.length === 2 &&\n    typeof mixedVar[0] === 'object' &&\n    typeof mixedVar[1] === 'string') {\n    obj = mixedVar[0]\n    method = mixedVar[1]\n    name = (obj.constructor && getFuncName(obj.constructor)) + '::' + method\n  } else {\n    return false\n  }\n\n  if (syntaxOnly || typeof obj[method] === 'function') {\n    if (callableName) {\n      $global[callableName] = name\n    }\n    return true\n  }\n\n  // validFunctionName avoids exploits\n  if (validFunctionName && typeof eval(method) === 'function') { // eslint-disable-line no-eval\n    if (callableName) {\n      $global[callableName] = name\n    }\n    return true\n  }\n\n  return false\n}\n"]}