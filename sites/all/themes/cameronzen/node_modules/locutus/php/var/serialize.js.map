{"version":3,"sources":["../../../src/php/var/serialize.js"],"names":[],"mappings":"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","file":"serialize.js","sourcesContent":["module.exports = function serialize (mixedValue) {\n  //  discuss at: http://locutus.io/php/serialize/\n  // original by: Arpad Ray (mailto:arpad@php.net)\n  // improved by: Dino\n  // improved by: Le Torbi (http://www.letorbi.de/)\n  // improved by: Kevin van Zonneveld (http://kvz.io/)\n  // bugfixed by: Andrej Pavlovic\n  // bugfixed by: Garagoth\n  // bugfixed by: Russell Walker (http://www.nbill.co.uk/)\n  // bugfixed by: Jamie Beck (http://www.terabit.ca/)\n  // bugfixed by: Kevin van Zonneveld (http://kvz.io/)\n  // bugfixed by: Ben (http://benblume.co.uk/)\n  // bugfixed by: Codestar (http://codestarlive.com/)\n  //    input by: DtTvB (http://dt.in.th/2008-09-16.string-length-in-bytes.html)\n  //    input by: Martin (http://www.erlenwiese.de/)\n  //      note 1: We feel the main purpose of this function should be to ease\n  //      note 1: the transport of data between php & js\n  //      note 1: Aiming for PHP-compatibility, we have to translate objects to arrays\n  //   example 1: serialize(['Kevin', 'van', 'Zonneveld'])\n  //   returns 1: 'a:3:{i:0;s:5:\"Kevin\";i:1;s:3:\"van\";i:2;s:9:\"Zonneveld\";}'\n  //   example 2: serialize({firstName: 'Kevin', midName: 'van'})\n  //   returns 2: 'a:2:{s:9:\"firstName\";s:5:\"Kevin\";s:7:\"midName\";s:3:\"van\";}'\n\n  var val, key, okey\n  var ktype = ''\n  var vals = ''\n  var count = 0\n\n  var _utf8Size = function (str) {\n    var size = 0\n    var i = 0\n    var l = str.length\n    var code = ''\n    for (i = 0; i < l; i++) {\n      code = str.charCodeAt(i)\n      if (code < 0x0080) {\n        size += 1\n      } else if (code < 0x0800) {\n        size += 2\n      } else {\n        size += 3\n      }\n    }\n    return size\n  }\n\n  var _getType = function (inp) {\n    var match\n    var key\n    var cons\n    var types\n    var type = typeof inp\n\n    if (type === 'object' && !inp) {\n      return 'null'\n    }\n\n    if (type === 'object') {\n      if (!inp.constructor) {\n        return 'object'\n      }\n      cons = inp.constructor.toString()\n      match = cons.match(/(\\w+)\\(/)\n      if (match) {\n        cons = match[1].toLowerCase()\n      }\n      types = ['boolean', 'number', 'string', 'array']\n      for (key in types) {\n        if (cons === types[key]) {\n          type = types[key]\n          break\n        }\n      }\n    }\n    return type\n  }\n\n  var type = _getType(mixedValue)\n\n  switch (type) {\n    case 'function':\n      val = ''\n      break\n    case 'boolean':\n      val = 'b:' + (mixedValue ? '1' : '0')\n      break\n    case 'number':\n      val = (Math.round(mixedValue) === mixedValue ? 'i' : 'd') + ':' + mixedValue\n      break\n    case 'string':\n      val = 's:' + _utf8Size(mixedValue) + ':\"' + mixedValue + '\"'\n      break\n    case 'array':\n    case 'object':\n      val = 'a'\n      /*\n      if (type === 'object') {\n        var objname = mixedValue.constructor.toString().match(/(\\w+)\\(\\)/);\n        if (objname === undefined) {\n          return;\n        }\n        objname[1] = serialize(objname[1]);\n        val = 'O' + objname[1].substring(1, objname[1].length - 1);\n      }\n      */\n\n      for (key in mixedValue) {\n        if (mixedValue.hasOwnProperty(key)) {\n          ktype = _getType(mixedValue[key])\n          if (ktype === 'function') {\n            continue\n          }\n\n          okey = (key.match(/^[0-9]+$/) ? parseInt(key, 10) : key)\n          vals += serialize(okey) + serialize(mixedValue[key])\n          count++\n        }\n      }\n      val += ':' + count + ':{' + vals + '}'\n      break\n    case 'undefined':\n    default:\n      // Fall-through\n      // if the JS object has a property which contains a null value,\n      // the string cannot be unserialized by PHP\n      val = 'N'\n      break\n  }\n  if (type !== 'object' && type !== 'array') {\n    val += ';'\n  }\n\n  return val\n}\n"]}