{"version":3,"sources":["../../../src/php/json/json_encode.js"],"names":[],"mappings":"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","file":"json_encode.js","sourcesContent":["module.exports = function json_encode (mixedVal) { // eslint-disable-line camelcase\n  //       discuss at: http://phpjs.org/functions/json_encode/\n  //      original by: Public Domain (http://www.json.org/json2.js)\n  // reimplemented by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n  //      improved by: Michael White\n  //         input by: felix\n  //      bugfixed by: Brett Zamir (http://brett-zamir.me)\n  //        example 1: json_encode('Kevin')\n  //        returns 1: '\"Kevin\"'\n\n  /*\n    http://www.JSON.org/json2.js\n    2008-11-19\n    Public Domain.\n    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n    See http://www.JSON.org/js.html\n  */\n\n  var $global = (typeof window !== 'undefined' ? window : global)\n  $global.$locutus = $global.$locutus || {}\n  var $locutus = $global.$locutus\n  $locutus.php = $locutus.php || {}\n\n  var json = $global.JSON\n  var retVal\n  try {\n    if (typeof json === 'object' && typeof json.stringify === 'function') {\n      // Errors will not be caught here if our own equivalent to resource\n      retVal = json.stringify(mixedVal)\n      if (retVal === undefined) {\n        throw new SyntaxError('json_encode')\n      }\n      return retVal\n    }\n\n    var value = mixedVal\n\n    var quote = function (string) {\n      var escapeChars = [\n        '\\u0000-\\u001f',\n        '\\u007f-\\u009f',\n        '\\u00ad',\n        '\\u0600-\\u0604',\n        '\\u070f',\n        '\\u17b4',\n        '\\u17b5',\n        '\\u200c-\\u200f',\n        '\\u2028-\\u202f',\n        '\\u2060-\\u206f',\n        '\\ufeff',\n        '\\ufff0-\\uffff'\n      ].join('')\n      var escapable = new RegExp('[\\\\\"' + escapeChars + ']', 'g')\n      var meta = {\n        // table of character substitutions\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\f': '\\\\f',\n        '\\r': '\\\\r',\n        '\"': '\\\\\"',\n        '\\\\': '\\\\\\\\'\n      }\n\n      escapable.lastIndex = 0\n      return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n        var c = meta[a]\n        return typeof c === 'string' ? c : '\\\\u' + ('0000' + a.charCodeAt(0)\n          .toString(16))\n          .slice(-4)\n      }) + '\"' : '\"' + string + '\"'\n    }\n\n    var _str = function (key, holder) {\n      var gap = ''\n      var indent = '    '\n      // The loop counter.\n      var i = 0\n      // The member key.\n      var k = ''\n      // The member value.\n      var v = ''\n      var length = 0\n      var mind = gap\n      var partial = []\n      var value = holder[key]\n\n      // If the value has a toJSON method, call it to obtain a replacement value.\n      if (value && typeof value === 'object' && typeof value.toJSON === 'function') {\n        value = value.toJSON(key)\n      }\n\n      // What happens next depends on the value's type.\n      switch (typeof value) {\n        case 'string':\n          return quote(value)\n\n        case 'number':\n          // JSON numbers must be finite. Encode non-finite numbers as null.\n          return isFinite(value) ? String(value) : 'null'\n\n        case 'boolean':\n        case 'null':\n          // If the value is a boolean or null, convert it to a string. Note:\n          // typeof null does not produce 'null'. The case is included here in\n          // the remote chance that this gets fixed someday.\n          return String(value)\n\n        case 'object':\n          // If the type is 'object', we might be dealing with an object or an array or\n          // null.\n          // Due to a specification blunder in ECMAScript, typeof null is 'object',\n          // so watch out for that case.\n          if (!value) {\n            return 'null'\n          }\n\n          // Make an array to hold the partial results of stringifying this object value.\n          gap += indent\n          partial = []\n\n          // Is the value an array?\n          if (Object.prototype.toString.apply(value) === '[object Array]') {\n            // The value is an array. Stringify every element. Use null as a placeholder\n            // for non-JSON values.\n            length = value.length\n            for (i = 0; i < length; i += 1) {\n              partial[i] = _str(i, value) || 'null'\n            }\n\n            // Join all of the elements together, separated with commas, and wrap them in\n            // brackets.\n            v = partial.length === 0 ? '[]' : gap\n              ? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']'\n              : '[' + partial.join(',') + ']'\n            gap = mind\n            return v\n          }\n\n          // Iterate through all of the keys in the object.\n          for (k in value) {\n            if (Object.hasOwnProperty.call(value, k)) {\n              v = _str(k, value)\n              if (v) {\n                partial.push(quote(k) + (gap ? ': ' : ':') + v)\n              }\n            }\n          }\n\n          // Join all of the member texts together, separated with commas,\n          // and wrap them in braces.\n          v = partial.length === 0 ? '{}' : gap\n            ? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}'\n            : '{' + partial.join(',') + '}'\n          gap = mind\n          return v\n        case 'undefined':\n        case 'function':\n        default:\n          throw new SyntaxError('json_encode')\n      }\n    }\n\n    // Make a fake root object containing our value under the key of ''.\n    // Return the result of stringifying the value.\n    return _str('', {\n      '': value\n    })\n  } catch (err) {\n    // @todo: ensure error handling above throws a SyntaxError in all cases where it could\n    // (i.e., when the JSON global is not available and there is an error)\n    if (!(err instanceof SyntaxError)) {\n      throw new Error('Unexpected error type in json_encode()')\n    }\n    // usable by json_last_error()\n    $locutus.php.last_error_json = 4\n    return null\n  }\n}\n"]}