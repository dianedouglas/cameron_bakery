{"version":3,"sources":["../../../src/php/filesystem/pathinfo.js"],"names":[],"mappings":"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","file":"pathinfo.js","sourcesContent":["module.exports = function pathinfo (path, options) {\n  //  discuss at: http://locutus.io/php/pathinfo/\n  // original by: Nate\n  //  revised by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Dmitry Gorelenkov\n  //    input by: Timo\n  //      note 1: Inspired by actual PHP source: php5-5.2.6/ext/standard/string.c line #1559\n  //      note 1: The way the bitwise arguments are handled allows for greater flexibility\n  //      note 1: & compatability. We might even standardize this\n  //      note 1: code and use a similar approach for\n  //      note 1: other bitwise PHP functions\n  //      note 1: Locutus tries very hard to stay away from a core.js\n  //      note 1: file with global dependencies, because we like\n  //      note 1: that you can just take a couple of functions and be on your way.\n  //      note 1: But by way we implemented this function,\n  //      note 1: if you want you can still declare the PATHINFO_*\n  //      note 1: yourself, and then you can use:\n  //      note 1: pathinfo('/www/index.html', PATHINFO_BASENAME | PATHINFO_EXTENSION);\n  //      note 1: which makes it fully compliant with PHP syntax.\n  //   example 1: pathinfo('/www/htdocs/index.html', 1)\n  //   returns 1: '/www/htdocs'\n  //   example 2: pathinfo('/www/htdocs/index.html', 'PATHINFO_BASENAME')\n  //   returns 2: 'index.html'\n  //   example 3: pathinfo('/www/htdocs/index.html', 'PATHINFO_EXTENSION')\n  //   returns 3: 'html'\n  //   example 4: pathinfo('/www/htdocs/index.html', 'PATHINFO_FILENAME')\n  //   returns 4: 'index'\n  //   example 5: pathinfo('/www/htdocs/index.html', 2 | 4)\n  //   returns 5: {basename: 'index.html', extension: 'html'}\n  //   example 6: pathinfo('/www/htdocs/index.html', 'PATHINFO_ALL')\n  //   returns 6: {dirname: '/www/htdocs', basename: 'index.html', extension: 'html', filename: 'index'}\n  //   example 7: pathinfo('/www/htdocs/index.html')\n  //   returns 7: {dirname: '/www/htdocs', basename: 'index.html', extension: 'html', filename: 'index'}\n\n  var basename = require('../filesystem/basename')\n  var opt = ''\n  var realOpt = ''\n  var optName = ''\n  var optTemp = 0\n  var tmpArr = {}\n  var cnt = 0\n  var i = 0\n  var haveBasename = false\n  var haveExtension = false\n  var haveFilename = false\n\n  // Input defaulting & sanitation\n  if (!path) {\n    return false\n  }\n  if (!options) {\n    options = 'PATHINFO_ALL'\n  }\n\n  // Initialize binary arguments. Both the string & integer (constant) input is\n  // allowed\n  var OPTS = {\n    'PATHINFO_DIRNAME': 1,\n    'PATHINFO_BASENAME': 2,\n    'PATHINFO_EXTENSION': 4,\n    'PATHINFO_FILENAME': 8,\n    'PATHINFO_ALL': 0\n  }\n  // PATHINFO_ALL sums up all previously defined PATHINFOs (could just pre-calculate)\n  for (optName in OPTS) {\n    if (OPTS.hasOwnProperty(optName)) {\n      OPTS.PATHINFO_ALL = OPTS.PATHINFO_ALL | OPTS[optName]\n    }\n  }\n  if (typeof options !== 'number') {\n    // Allow for a single string or an array of string flags\n    options = [].concat(options)\n    for (i = 0; i < options.length; i++) {\n      // Resolve string input to bitwise e.g. 'PATHINFO_EXTENSION' becomes 4\n      if (OPTS[options[i]]) {\n        optTemp = optTemp | OPTS[options[i]]\n      }\n    }\n    options = optTemp\n  }\n\n  // Internal Functions\n  var _getExt = function (path) {\n    var str = path + ''\n    var dotP = str.lastIndexOf('.') + 1\n    return !dotP ? false : dotP !== str.length ? str.substr(dotP) : ''\n  }\n\n  // Gather path infos\n  if (options & OPTS.PATHINFO_DIRNAME) {\n    var dirName = path\n      .replace(/\\\\/g, '/')\n      .replace(/\\/[^\\/]*\\/?$/, '') // dirname\n    tmpArr.dirname = dirName === path ? '.' : dirName\n  }\n\n  if (options & OPTS.PATHINFO_BASENAME) {\n    if (haveBasename === false) {\n      haveBasename = basename(path)\n    }\n    tmpArr.basename = haveBasename\n  }\n\n  if (options & OPTS.PATHINFO_EXTENSION) {\n    if (haveBasename === false) {\n      haveBasename = basename(path)\n    }\n    if (haveExtension === false) {\n      haveExtension = _getExt(haveBasename)\n    }\n    if (haveExtension !== false) {\n      tmpArr.extension = haveExtension\n    }\n  }\n\n  if (options & OPTS.PATHINFO_FILENAME) {\n    if (haveBasename === false) {\n      haveBasename = basename(path)\n    }\n    if (haveExtension === false) {\n      haveExtension = _getExt(haveBasename)\n    }\n    if (haveFilename === false) {\n      haveFilename = haveBasename.slice(0, haveBasename.length - (haveExtension\n        ? haveExtension.length + 1\n        : haveExtension === false\n          ? 0\n          : 1\n        )\n      )\n    }\n\n    tmpArr.filename = haveFilename\n  }\n\n  // If array contains only 1 element: return string\n  cnt = 0\n  for (opt in tmpArr) {\n    if (tmpArr.hasOwnProperty(opt)) {\n      cnt++\n      realOpt = opt\n    }\n  }\n  if (cnt === 1) {\n    return tmpArr[realOpt]\n  }\n\n  // Return full-blown array\n  return tmpArr\n}\n"]}