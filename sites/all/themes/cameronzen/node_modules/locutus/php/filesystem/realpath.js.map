{"version":3,"sources":["../../../src/php/filesystem/realpath.js"],"names":[],"mappings":";;AAAA,OAAO,OAAP,GAAiB,SAAS,QAAT,CAAmB,IAAnB,EAAyB;;;;;;;;AAQxC,MAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC,QAAI,WAAW,QAAQ,MAAR,CAAf;AACA,WAAO,SAAS,SAAT,CAAmB,IAAnB,CAAP;AACD;;AAED,MAAI,IAAI,CAAR;AACA,MAAI,MAAM,EAAV,C;AACA,MAAI,IAAI,KAAK,MAAL,CAAY,QAAZ,CAAqB,IAA7B,C;;;AAGA,SAAO,CAAC,OAAO,EAAR,EAAY,OAAZ,CAAoB,IAApB,EAA0B,GAA1B,CAAP;AACA,MAAI,KAAK,OAAL,CAAa,KAAb,MAAwB,CAAC,CAA7B,EAAgC;AAC9B,QAAI,CAAJ;AACD;;;AAGD,MAAI,CAAC,CAAL,EAAQ;AACN,WAAO,EAAE,SAAF,CAAY,CAAZ,EAAe,EAAE,WAAF,CAAc,GAAd,IAAqB,CAApC,IAAyC,IAAhD;AACD;;;AAGD,QAAM,KAAK,KAAL,CAAW,GAAX,CAAN,C;AACA,SAAO,EAAP,C;AACA,OAAK,IAAI,CAAT,IAAc,GAAd,EAAmB;;AACjB,QAAI,IAAI,CAAJ,MAAW,GAAf,EAAoB;AAClB;AACD;;AAED,QAAI,IAAI,CAAJ,MAAW,IAAf,EAAqB;;;AAGnB,UAAI,KAAK,MAAL,GAAc,CAAlB,EAAqB;AACnB,aAAK,GAAL;AACD;AACF,KAND,MAMO;;;;;AAKL,UAAK,KAAK,MAAL,GAAc,CAAf,IAAsB,IAAI,CAAJ,MAAW,EAArC,EAA0C;AACxC,aAAK,IAAL,CAAU,IAAI,CAAJ,CAAV;AACD;AACF;AACF;;;AAGD,SAAO,KAAK,IAAL,CAAU,GAAV,CAAP;AACD,CAvDD","file":"realpath.js","sourcesContent":["module.exports = function realpath (path) {\n  //  discuss at: http://locutus.io/php/realpath/\n  // original by: mk.keck\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  //      note 1: Returned path is an url like e.g. 'http://yourhost.tld/path/'\n  //   example 1: realpath('some/dir/.././_supporters/pj_test_supportfile_1.htm')\n  //   returns 1: 'some/_supporters/pj_test_supportfile_1.htm'\n\n  if (typeof window === 'undefined') {\n    var nodePath = require('path')\n    return nodePath.normalize(path)\n  }\n\n  var p = 0\n  var arr = [] // Save the root, if not given\n  var r = this.window.location.href // Avoid input failures\n\n  // Check if there's a port in path (like 'http://')\n  path = (path + '').replace('\\\\', '/')\n  if (path.indexOf('://') !== -1) {\n    p = 1\n  }\n\n  // Ok, there's not a port in path, so let's take the root\n  if (!p) {\n    path = r.substring(0, r.lastIndexOf('/') + 1) + path\n  }\n\n  // Explode the given path into it's parts\n  arr = path.split('/') // The path is an array now\n  path = [] // Foreach part make a check\n  for (var k in arr) { // This is'nt really interesting\n    if (arr[k] === '.') {\n      continue\n    }\n    // This reduces the realpath\n    if (arr[k] === '..') {\n      /* But only if there more than 3 parts in the path-array.\n       * The first three parts are for the uri */\n      if (path.length > 3) {\n        path.pop()\n      }\n    } else {\n      // This adds parts to the realpath\n      // But only if the part is not empty or the uri\n      // (the first three parts ar needed) was not\n      // saved\n      if ((path.length < 2) || (arr[k] !== '')) {\n        path.push(arr[k])\n      }\n    }\n  }\n\n  // Returns the absloute path as a string\n  return path.join('/')\n}\n"]}