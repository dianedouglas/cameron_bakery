{"version":3,"sources":["../../../src/php/url/http_build_query.js"],"names":[],"mappings":";;;;AAAA,OAAO,OAAP,GAAiB,SAAS,gBAAT,CAA2B,QAA3B,EAAqC,aAArC,EAAoD,YAApD,EAAkE;;;;;;;;;;;;;;;;;;;AAkBjF,MAAI,YAAY,QAAQ,kBAAR,CAAhB;;AAEA,MAAI,KAAJ;AACA,MAAI,GAAJ;AACA,MAAI,MAAM,EAAV;;AAEA,MAAI,wBAAwB,SAAxB,qBAAwB,CAAU,GAAV,EAAe,GAAf,EAAoB,YAApB,EAAkC;AAC5D,QAAI,CAAJ;AACA,QAAI,MAAM,EAAV;AACA,QAAI,QAAQ,IAAZ,EAAkB;AAChB,YAAM,GAAN;AACD,KAFD,MAEO,IAAI,QAAQ,KAAZ,EAAmB;AACxB,YAAM,GAAN;AACD;AACD,QAAI,QAAQ,IAAZ,EAAkB;AAChB,UAAI,QAAO,GAAP,yCAAO,GAAP,OAAe,QAAnB,EAA6B;AAC3B,aAAK,CAAL,IAAU,GAAV,EAAe;AACb,cAAI,IAAI,CAAJ,MAAW,IAAf,EAAqB;AACnB,gBAAI,IAAJ,CAAS,sBAAsB,MAAM,GAAN,GAAY,CAAZ,GAAgB,GAAtC,EAA2C,IAAI,CAAJ,CAA3C,EAAmD,YAAnD,CAAT;AACD;AACF;AACD,eAAO,IAAI,IAAJ,CAAS,YAAT,CAAP;AACD,OAPD,MAOO,IAAI,OAAO,GAAP,KAAe,UAAnB,EAA+B;AACpC,eAAO,UAAU,GAAV,IAAiB,GAAjB,GAAuB,UAAU,GAAV,CAA9B;AACD,OAFM,MAEA;AACL,cAAM,IAAI,KAAJ,CAAU,uDAAV,CAAN;AACD;AACF,KAbD,MAaO;AACL,aAAO,EAAP;AACD;AACF,GAxBD;;AA0BA,MAAI,CAAC,YAAL,EAAmB;AACjB,mBAAe,GAAf;AACD;AACD,OAAK,GAAL,IAAY,QAAZ,EAAsB;AACpB,YAAQ,SAAS,GAAT,CAAR;AACA,QAAI,iBAAiB,CAAC,MAAM,GAAN,CAAtB,EAAkC;AAChC,YAAM,OAAO,aAAP,IAAwB,GAA9B;AACD;AACD,QAAI,QAAQ,sBAAsB,GAAtB,EAA2B,KAA3B,EAAkC,YAAlC,CAAZ;AACA,QAAI,UAAU,EAAd,EAAkB;AAChB,UAAI,IAAJ,CAAS,KAAT;AACD;AACF;;AAED,SAAO,IAAI,IAAJ,CAAS,YAAT,CAAP;AACD,CAjED","file":"http_build_query.js","sourcesContent":["module.exports = function http_build_query (formdata, numericPrefix, argSeparator) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/http_build_query/\n  // original by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Legaev Andrey\n  // improved by: Michael White (http://getsprink.com)\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  //  revised by: stag019\n  //    input by: Dreamer\n  // bugfixed by: Brett Zamir (http://brett-zamir.me)\n  // bugfixed by: MIO_KODUKI (http://mio-koduki.blogspot.com/)\n  //      note 1: If the value is null, key and value are skipped in the\n  //      note 1: http_build_query of PHP while in locutus they are not.\n  //   example 1: http_build_query({foo: 'bar', php: 'hypertext processor', baz: 'boom', cow: 'milk'}, '', '&amp;')\n  //   returns 1: 'foo=bar&amp;php=hypertext+processor&amp;baz=boom&amp;cow=milk'\n  //   example 2: http_build_query({'php': 'hypertext processor', 0: 'foo', 1: 'bar', 2: 'baz', 3: 'boom', 'cow': 'milk'}, 'myvar_')\n  //   returns 2: 'myvar_0=foo&myvar_1=bar&myvar_2=baz&myvar_3=boom&php=hypertext+processor&cow=milk'\n\n  var urlencode = require('../url/urlencode')\n\n  var value\n  var key\n  var tmp = []\n\n  var _httpBuildQueryHelper = function (key, val, argSeparator) {\n    var k\n    var tmp = []\n    if (val === true) {\n      val = '1'\n    } else if (val === false) {\n      val = '0'\n    }\n    if (val !== null) {\n      if (typeof val === 'object') {\n        for (k in val) {\n          if (val[k] !== null) {\n            tmp.push(_httpBuildQueryHelper(key + '[' + k + ']', val[k], argSeparator))\n          }\n        }\n        return tmp.join(argSeparator)\n      } else if (typeof val !== 'function') {\n        return urlencode(key) + '=' + urlencode(val)\n      } else {\n        throw new Error('There was an error processing for http_build_query().')\n      }\n    } else {\n      return ''\n    }\n  }\n\n  if (!argSeparator) {\n    argSeparator = '&'\n  }\n  for (key in formdata) {\n    value = formdata[key]\n    if (numericPrefix && !isNaN(key)) {\n      key = String(numericPrefix) + key\n    }\n    var query = _httpBuildQueryHelper(key, value, argSeparator)\n    if (query !== '') {\n      tmp.push(query)\n    }\n  }\n\n  return tmp.join(argSeparator)\n}\n"]}