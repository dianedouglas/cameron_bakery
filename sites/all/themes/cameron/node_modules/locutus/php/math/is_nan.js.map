{"version":3,"sources":["../../../src/php/math/is_nan.js"],"names":[],"mappings":";;;;AAAA,OAAO,OAAP,GAAiB,SAAS,MAAT,CAAiB,GAAjB,EAAsB;;;;;;;;;;AASrC,MAAI,cAAc,EAAlB;;AAEA,MAAI,OAAO,GAAP,KAAe,QAAf,IAA2B,MAAM,GAAN,CAA/B,EAA2C;AACzC,WAAO,IAAP;AACD;;;AAGD,MAAI,QAAO,GAAP,yCAAO,GAAP,OAAe,QAAnB,EAA6B;AAC3B,kBAAe,OAAO,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,GAA/B,MAAwC,gBAAxC,GAA2D,OAA3D,GAAqE,QAApF;AACD,GAFD,MAEO,IAAI,OAAO,GAAP,KAAe,QAAf,IAA2B,CAAC,IAAI,KAAJ,CAAU,YAAV,CAAhC,EAAyD;;AAE9D,kBAAc,QAAd;AACD;AACD,MAAI,WAAJ,EAAiB;AACf,UAAM,IAAI,KAAJ,CAAU,yDAAyD,WAAzD,GAAuE,QAAjF,CAAN;AACD;;AAED,SAAO,KAAP;AACD,CA3BD","file":"is_nan.js","sourcesContent":["module.exports = function is_nan (val) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/is_nan/\n  // original by: Onno Marsman (https://twitter.com/onnomarsman)\n  //    input by: Robin\n  //   example 1: is_nan(NaN)\n  //   returns 1: true\n  //   example 2: is_nan(0)\n  //   returns 2: false\n\n  var warningType = ''\n\n  if (typeof val === 'number' && isNaN(val)) {\n    return true\n  }\n\n  // Some errors for maximum PHP compatibility\n  if (typeof val === 'object') {\n    warningType = (Object.prototype.toString.call(val) === '[object Array]' ? 'array' : 'object')\n  } else if (typeof val === 'string' && !val.match(/^[\\+\\-]?\\d/)) {\n    // simulate PHP's behaviour: '-9a' doesn't give a warning, but 'a9' does.\n    warningType = 'string'\n  }\n  if (warningType) {\n    throw new Error('Warning: is_nan() expects parameter 1 to be double, ' + warningType + ' given')\n  }\n\n  return false\n}\n"]}