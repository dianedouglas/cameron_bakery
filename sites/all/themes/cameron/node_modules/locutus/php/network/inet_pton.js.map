{"version":3,"sources":["../../../src/php/network/inet_pton.js"],"names":[],"mappings":";;AAAA,OAAO,OAAP,GAAiB,SAAS,SAAT,CAAoB,CAApB,EAAuB;;;;;;;;;AAQtC,MAAI,CAAJ;AACA,MAAI,CAAJ;AACA,MAAI,CAAJ;AACA,MAAI,CAAJ;AACA,MAAI,CAAJ;AACA,MAAI,IAAI,OAAO,YAAf;;;AAGA,MAAI,EAAE,KAAF,CAAQ,yBAAR,CAAJ;AACA,MAAI,CAAJ,EAAO;AACL,QAAI,EAAE,CAAF,EAAK,KAAL,CAAW,GAAX,CAAJ;AACA,QAAI,EAAE,EAAE,CAAF,CAAF,IAAU,EAAE,EAAE,CAAF,CAAF,CAAV,GAAoB,EAAE,EAAE,CAAF,CAAF,CAApB,GAA8B,EAAE,EAAE,CAAF,CAAF,CAAlC;;AAEA,WAAO,EAAE,MAAF,KAAa,CAAb,GAAiB,CAAjB,GAAqB,KAA5B;AACD;AACD,MAAI,mEAAJ;;;AAGA,MAAI,EAAE,KAAF,CAAQ,CAAR,CAAJ;AACA,MAAI,CAAJ,EAAO;;AAEL,SAAK,IAAI,CAAT,EAAY,IAAI,CAAhB,EAAmB,GAAnB,EAAwB;;AAEtB,UAAI,MAAM,CAAN,IAAW,EAAE,CAAF,EAAK,MAAL,KAAgB,CAA/B,EAAkC;AAChC;AACD;AACD,QAAE,CAAF,IAAO,EAAE,CAAF,EAAK,KAAL,CAAW,GAAX,CAAP;AACA,WAAK,IAAI,CAAT,EAAY,IAAI,EAAE,CAAF,EAAK,MAArB,EAA6B,GAA7B,EAAkC;AAChC,UAAE,CAAF,EAAK,CAAL,IAAU,SAAS,EAAE,CAAF,EAAK,CAAL,CAAT,EAAkB,EAAlB,CAAV;;AAEA,YAAI,MAAM,EAAE,CAAF,EAAK,CAAL,CAAN,CAAJ,EAAoB;;AAElB,iBAAO,KAAP;AACD;AACD,UAAE,CAAF,EAAK,CAAL,IAAU,EAAE,EAAE,CAAF,EAAK,CAAL,KAAW,CAAb,IAAkB,EAAE,EAAE,CAAF,EAAK,CAAL,IAAU,IAAZ,CAA5B;AACD;AACD,QAAE,CAAF,IAAO,EAAE,CAAF,EAAK,IAAL,CAAU,EAAV,CAAP;AACD;AACD,QAAI,EAAE,CAAF,EAAK,MAAL,GAAc,EAAE,CAAF,EAAK,MAAvB;AACA,QAAI,MAAM,EAAV,EAAc;AACZ,aAAO,EAAE,CAAF,IAAO,EAAE,CAAF,CAAd;AACD,KAFD,MAEO,IAAI,IAAI,EAAJ,IAAU,EAAE,CAAF,EAAK,MAAL,GAAc,CAA5B,EAA+B;AACpC,aAAO,EAAE,CAAF,IAAQ,IAAI,KAAJ,CAAU,KAAK,CAAL,GAAS,CAAnB,CAAD,CACX,IADW,CACN,MADM,CAAP,GACW,EAAE,CAAF,CADlB;AAED;AACF;;;AAGD,SAAO,KAAP;AACD,CAzDD","file":"inet_pton.js","sourcesContent":["module.exports = function inet_pton (a) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/inet_pton/\n  // original by: Theriault (https://github.com/Theriault)\n  //   example 1: inet_pton('::')\n  //   returns 1: '\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0'\n  //   example 2: inet_pton('127.0.0.1')\n  //   returns 2: '\\x7F\\x00\\x00\\x01'\n\n  var r\n  var m\n  var x\n  var i\n  var j\n  var f = String.fromCharCode\n\n  // IPv4\n  m = a.match(/^(?:\\d{1,3}(?:\\.|$)){4}/)\n  if (m) {\n    m = m[0].split('.')\n    m = f(m[0]) + f(m[1]) + f(m[2]) + f(m[3])\n    // Return if 4 bytes, otherwise false.\n    return m.length === 4 ? m : false\n  }\n  r = /^((?:[\\da-f]{1,4}(?::|)){0,8})(::)?((?:[\\da-f]{1,4}(?::|)){0,8})$/\n\n  // IPv6\n  m = a.match(r)\n  if (m) {\n    // Translate each hexadecimal value.\n    for (j = 1; j < 4; j++) {\n      // Indice 2 is :: and if no length, continue.\n      if (j === 2 || m[j].length === 0) {\n        continue\n      }\n      m[j] = m[j].split(':')\n      for (i = 0; i < m[j].length; i++) {\n        m[j][i] = parseInt(m[j][i], 16)\n        // Would be NaN if it was blank, return false.\n        if (isNaN(m[j][i])) {\n          // Invalid IP.\n          return false\n        }\n        m[j][i] = f(m[j][i] >> 8) + f(m[j][i] & 0xFF)\n      }\n      m[j] = m[j].join('')\n    }\n    x = m[1].length + m[3].length\n    if (x === 16) {\n      return m[1] + m[3]\n    } else if (x < 16 && m[2].length > 0) {\n      return m[1] + (new Array(16 - x + 1))\n        .join('\\x00') + m[3]\n    }\n  }\n\n  // Invalid IP\n  return false\n}\n"]}