{"version":3,"sources":["../../../src/php/strings/metaphone.js"],"names":[],"mappings":"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","file":"metaphone.js","sourcesContent":["module.exports = function metaphone (word, maxPhonemes) {\n  //  discuss at: http://locutus.io/php/metaphone/\n  // original by: Greg Frazier\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Rafa≈Ç Kukawski (http://blog.kukawski.pl)\n  //   example 1: metaphone('Gnu')\n  //   returns 1: 'N'\n  //   example 2: metaphone('bigger')\n  //   returns 2: 'BKR'\n  //   example 3: metaphone('accuracy')\n  //   returns 3: 'AKKRS'\n  //   example 4: metaphone('batch batcher')\n  //   returns 4: 'BXBXR'\n\n  var type = typeof word\n\n  if (type === 'undefined' || type === 'object' && word !== null) {\n    // weird!\n    return null\n  }\n\n  // infinity and NaN values are treated as strings\n  if (type === 'number') {\n    if (isNaN(word)) {\n      word = 'NAN'\n    } else if (!isFinite(word)) {\n      word = 'INF'\n    }\n  }\n\n  if (maxPhonemes < 0) {\n    return false\n  }\n\n  maxPhonemes = Math.floor(+maxPhonemes) || 0\n\n  // alpha depends on locale, so this var might need an update\n  // or should be turned into a regex\n  // for now assuming pure a-z\n  var alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  var vowel = 'AEIOU'\n  var soft = 'EIY'\n  var leadingNonAlpha = new RegExp('^[^' + alpha + ']+')\n\n  word = typeof word === 'string' ? word : ''\n  word = word.toUpperCase().replace(leadingNonAlpha, '')\n\n  if (!word) {\n    return ''\n  }\n\n  var is = function (p, c) {\n    return c !== '' && p.indexOf(c) !== -1\n  }\n\n  var i = 0\n  var cc = word.charAt(0) // current char. Short name because it's used all over the function\n  var nc = word.charAt(1)  // next char\n  var nnc // after next char\n  var pc // previous char\n  var l = word.length\n  var meta = ''\n  // traditional is an internal param that could be exposed for now let it be a local var\n  var traditional = true\n\n  switch (cc) {\n    case 'A':\n      meta += nc === 'E' ? nc : cc\n      i += 1\n      break\n    case 'G':\n    case 'K':\n    case 'P':\n      if (nc === 'N') {\n        meta += nc\n        i += 2\n      }\n      break\n    case 'W':\n      if (nc === 'R') {\n        meta += nc\n        i += 2\n      } else if (nc === 'H' || is(vowel, nc)) {\n        meta += 'W'\n        i += 2\n      }\n      break\n    case 'X':\n      meta += 'S'\n      i += 1\n      break\n    case 'E':\n    case 'I':\n    case 'O':\n    case 'U':\n      meta += cc\n      i++\n      break\n  }\n\n  for (; i < l && (maxPhonemes === 0 || meta.length < maxPhonemes); i += 1) { // eslint-disable-line no-unmodified-loop-condition,max-len\n    cc = word.charAt(i)\n    nc = word.charAt(i + 1)\n    pc = word.charAt(i - 1)\n    nnc = word.charAt(i + 2)\n\n    if (cc === pc && cc !== 'C') {\n      continue\n    }\n\n    switch (cc) {\n      case 'B':\n        if (pc !== 'M') {\n          meta += cc\n        }\n        break\n      case 'C':\n        if (is(soft, nc)) {\n          if (nc === 'I' && nnc === 'A') {\n            meta += 'X'\n          } else if (pc !== 'S') {\n            meta += 'S'\n          }\n        } else if (nc === 'H') {\n          meta += !traditional && (nnc === 'R' || pc === 'S') ? 'K' : 'X'\n          i += 1\n        } else {\n          meta += 'K'\n        }\n        break\n      case 'D':\n        if (nc === 'G' && is(soft, nnc)) {\n          meta += 'J'\n          i += 1\n        } else {\n          meta += 'T'\n        }\n        break\n      case 'G':\n        if (nc === 'H') {\n          if (!(is('BDH', word.charAt(i - 3)) || word.charAt(i - 4) === 'H')) {\n            meta += 'F'\n            i += 1\n          }\n        } else if (nc === 'N') {\n          if (is(alpha, nnc) && word.substr(i + 1, 3) !== 'NED') {\n            meta += 'K'\n          }\n        } else if (is(soft, nc) && pc !== 'G') {\n          meta += 'J'\n        } else {\n          meta += 'K'\n        }\n        break\n      case 'H':\n        if (is(vowel, nc) && !is('CGPST', pc)) {\n          meta += cc\n        }\n        break\n      case 'K':\n        if (pc !== 'C') {\n          meta += 'K'\n        }\n        break\n      case 'P':\n        meta += nc === 'H' ? 'F' : cc\n        break\n      case 'Q':\n        meta += 'K'\n        break\n      case 'S':\n        if (nc === 'I' && is('AO', nnc)) {\n          meta += 'X'\n        } else if (nc === 'H') {\n          meta += 'X'\n          i += 1\n        } else if (!traditional && word.substr(i + 1, 3) === 'CHW') {\n          meta += 'X'\n          i += 2\n        } else {\n          meta += 'S'\n        }\n        break\n      case 'T':\n        if (nc === 'I' && is('AO', nnc)) {\n          meta += 'X'\n        } else if (nc === 'H') {\n          meta += '0'\n          i += 1\n        } else if (word.substr(i + 1, 2) !== 'CH') {\n          meta += 'T'\n        }\n        break\n      case 'V':\n        meta += 'F'\n        break\n      case 'W':\n      case 'Y':\n        if (is(vowel, nc)) {\n          meta += cc\n        }\n        break\n      case 'X':\n        meta += 'KS'\n        break\n      case 'Z':\n        meta += 'S'\n        break\n      case 'F':\n      case 'J':\n      case 'L':\n      case 'M':\n      case 'N':\n      case 'R':\n        meta += cc\n        break\n    }\n  }\n\n  return meta\n}\n"]}