{"version":3,"sources":["../../../src/php/strings/strnatcmp.js"],"names":[],"mappings":";;AAAA,OAAO,OAAP,GAAiB,SAAS,SAAT,CAAoB,CAApB,EAAuB,CAAvB,EAA0B;;;;;;;;;;;;;;;;;;;;;;AAsBzC,MAAI,iBAAiB,QAAQ,4BAAR,CAArB;;AAEA,MAAI,eAAe,WAAnB;AACA,MAAI,aAAa,KAAjB;AACA,MAAI,QAAQ,KAAZ;;AAEA,MAAI,UAAU,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,WAAO,IAAP;AACD;;AAED,MAAI,eAAe,CAAf,CAAJ;AACA,MAAI,eAAe,CAAf,CAAJ;;AAEA,MAAI,CAAC,EAAE,MAAH,IAAa,CAAC,EAAE,MAApB,EAA4B;AAC1B,WAAO,EAAE,MAAF,GAAW,EAAE,MAApB;AACD;;AAED,MAAI,IAAI,CAAR;AACA,MAAI,IAAI,CAAR;;AAEA,MAAI,EAAE,OAAF,CAAU,YAAV,EAAwB,EAAxB,CAAJ;AACA,MAAI,EAAE,OAAF,CAAU,YAAV,EAAwB,EAAxB,CAAJ;;AAEA,SAAO,IAAI,EAAE,MAAN,IAAgB,IAAI,EAAE,MAA7B,EAAqC;;AAEnC,WAAO,WAAW,IAAX,CAAgB,EAAE,MAAF,CAAS,CAAT,CAAhB,CAAP;AAAqC;AAArC,KACA,OAAO,WAAW,IAAX,CAAgB,EAAE,MAAF,CAAS,CAAT,CAAhB,CAAP;AAAqC;AAArC,KAEA,IAAI,KAAK,EAAE,MAAF,CAAS,CAAT,CAAT;AACA,QAAI,KAAK,EAAE,MAAF,CAAS,CAAT,CAAT;AACA,QAAI,WAAW,MAAM,IAAN,CAAW,EAAX,CAAf;AACA,QAAI,WAAW,MAAM,IAAN,CAAW,EAAX,CAAf;;AAEA,QAAI,YAAY,QAAhB,EAA0B;AACxB,UAAI,OAAO,CAAX;AACA,UAAI,aAAa,OAAO,GAAP,IAAc,OAAO,GAAtC;;AAEA,SAAG;AACD,YAAI,CAAC,QAAL,EAAe;AACb,iBAAO,CAAC,CAAR;AACD,SAFD,MAEO,IAAI,CAAC,QAAL,EAAe;AACpB,iBAAO,CAAP;AACD,SAFM,MAEA,IAAI,KAAK,EAAT,EAAa;AAClB,cAAI,CAAC,IAAL,EAAW;AACT,mBAAO,CAAC,CAAR;AACD;;AAED,cAAI,UAAJ,EAAgB;AACd,mBAAO,CAAC,CAAR;AACD;AACF,SARM,MAQA,IAAI,KAAK,EAAT,EAAa;AAClB,cAAI,CAAC,IAAL,EAAW;AACT,mBAAO,CAAP;AACD;;AAED,cAAI,UAAJ,EAAgB;AACd,mBAAO,CAAP;AACD;AACF;;AAED,aAAK,EAAE,MAAF,CAAS,EAAE,CAAX,CAAL;AACA,aAAK,EAAE,MAAF,CAAS,EAAE,CAAX,CAAL;;AAEA,mBAAW,MAAM,IAAN,CAAW,EAAX,CAAX;AACA,mBAAW,MAAM,IAAN,CAAW,EAAX,CAAX;AACD,OA5BD,QA4BS,YAAY,QA5BrB;;AA8BA,UAAI,CAAC,UAAD,IAAe,IAAnB,EAAyB;AACvB,eAAO,IAAP;AACD;;AAED;AACD;;AAED,QAAI,CAAC,EAAD,IAAO,CAAC,EAAZ,EAAgB;AACd;AACD,KAFD,MAEO,IAAI,KAAK,EAAT,EAAa;AAClB,aAAO,CAAC,CAAR;AACD,KAFM,MAEA,IAAI,KAAK,EAAT,EAAa;AAClB,aAAO,CAAP;AACD;;AAED;AACA;AACD;;AAED,MAAI,gBAAgB,IAAI,EAAE,MAA1B;AACA,MAAI,gBAAgB,IAAI,EAAE,MAA1B;;;;AAIA,SAAO,CAAC,gBAAgB,aAAjB,KAAmC,gBAAgB,aAAnD,CAAP;AACD,CAlHD","file":"strnatcmp.js","sourcesContent":["module.exports = function strnatcmp (a, b) {\n  //       discuss at: http://locutus.io/php/strnatcmp/\n  //      original by: Martijn Wieringa\n  //      improved by: Michael White (http://getsprink.com)\n  //      improved by: Jack\n  //      bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)\n  // reimplemented by: Rafa≈Ç Kukawski\n  //        example 1: strnatcmp('abc', 'abc')\n  //        returns 1: 0\n  //        example 2: strnatcmp('a', 'b')\n  //        returns 2: -1\n  //        example 3: strnatcmp('10', '1')\n  //        returns 3: 1\n  //        example 4: strnatcmp('0000abc', '0abc')\n  //        returns 4: 0\n  //        example 5: strnatcmp('1239', '12345')\n  //        returns 5: -1\n  //        example 6: strnatcmp('t01239', 't012345')\n  //        returns 6: 1\n  //        example 7: strnatcmp('0A', '5N')\n  //        returns 7: -1\n\n  var _phpCastString = require('../_helpers/_phpCastString')\n\n  var leadingZeros = /^0+(?=\\d)/\n  var whitespace = /^\\s/\n  var digit = /^\\d/\n\n  if (arguments.length !== 2) {\n    return null\n  }\n\n  a = _phpCastString(a)\n  b = _phpCastString(b)\n\n  if (!a.length || !b.length) {\n    return a.length - b.length\n  }\n\n  var i = 0\n  var j = 0\n\n  a = a.replace(leadingZeros, '')\n  b = b.replace(leadingZeros, '')\n\n  while (i < a.length && j < b.length) {\n    // skip consecutive whitespace\n    while (whitespace.test(a.charAt(i))) i++\n    while (whitespace.test(b.charAt(j))) j++\n\n    var ac = a.charAt(i)\n    var bc = b.charAt(j)\n    var aIsDigit = digit.test(ac)\n    var bIsDigit = digit.test(bc)\n\n    if (aIsDigit && bIsDigit) {\n      var bias = 0\n      var fractional = ac === '0' || bc === '0'\n\n      do {\n        if (!aIsDigit) {\n          return -1\n        } else if (!bIsDigit) {\n          return 1\n        } else if (ac < bc) {\n          if (!bias) {\n            bias = -1\n          }\n\n          if (fractional) {\n            return -1\n          }\n        } else if (ac > bc) {\n          if (!bias) {\n            bias = 1\n          }\n\n          if (fractional) {\n            return 1\n          }\n        }\n\n        ac = a.charAt(++i)\n        bc = b.charAt(++j)\n\n        aIsDigit = digit.test(ac)\n        bIsDigit = digit.test(bc)\n      } while (aIsDigit || bIsDigit)\n\n      if (!fractional && bias) {\n        return bias\n      }\n\n      continue\n    }\n\n    if (!ac || !bc) {\n      continue\n    } else if (ac < bc) {\n      return -1\n    } else if (ac > bc) {\n      return 1\n    }\n\n    i++\n    j++\n  }\n\n  var iBeforeStrEnd = i < a.length\n  var jBeforeStrEnd = j < b.length\n\n  // Check which string ended first\n  // return -1 if a, 1 if b, 0 otherwise\n  return (iBeforeStrEnd > jBeforeStrEnd) - (iBeforeStrEnd < jBeforeStrEnd)\n}\n"]}