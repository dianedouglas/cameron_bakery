{"version":3,"sources":["../../../src/php/funchand/call_user_func_array.js"],"names":[],"mappings":";;;;AAAA,OAAO,OAAP,GAAiB,SAAS,oBAAT,CAA+B,EAA/B,EAAmC,UAAnC,EAA+C;;;;;;;;;;;;;;;;;;AAiB9D,MAAI,UAAW,OAAO,MAAP,KAAkB,WAAlB,GAAgC,MAAhC,GAAyC,MAAxD;AACA,MAAI,IAAJ;AACA,MAAI,QAAQ,IAAZ;;AAEA,MAAI,6BAA6B,kDAAjC;;AAEA,MAAI,OAAO,EAAP,KAAc,QAAlB,EAA4B;AAC1B,QAAI,OAAO,QAAQ,EAAR,CAAP,KAAuB,UAA3B,EAAuC;AACrC,aAAO,QAAQ,EAAR,CAAP;AACD,KAFD,MAEO,IAAI,GAAG,KAAH,CAAS,0BAAT,CAAJ,EAA0C;AAC/C,aAAQ,IAAI,QAAJ,CAAa,IAAb,EAAmB,YAAY,EAA/B,GAAR,C;AACD;AACF,GAND,MAMO,IAAI,OAAO,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,EAA/B,MAAuC,gBAA3C,EAA6D;AAClE,UAAI,OAAO,GAAG,CAAH,CAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAI,GAAG,CAAH,EAAM,KAAN,CAAY,0BAAZ,CAAJ,EAA6C;AAC3C,iBAAO,KAAK,GAAG,CAAH,IAAQ,IAAR,GAAe,GAAG,CAAH,CAAf,GAAuB,IAA5B,CAAP,C;AACD;AACF,OAJD,MAIO;AACL,iBAAO,GAAG,CAAH,EAAM,GAAG,CAAH,CAAN,CAAP;AACD;;AAED,UAAI,OAAO,GAAG,CAAH,CAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAI,OAAO,QAAQ,GAAG,CAAH,CAAR,CAAP,KAA0B,UAA9B,EAA0C;AACxC,kBAAQ,QAAQ,GAAG,CAAH,CAAR,CAAR;AACD,SAFD,MAEO,IAAI,GAAG,CAAH,EAAM,KAAN,CAAY,0BAAZ,CAAJ,EAA6C;AAClD,kBAAQ,KAAK,GAAG,CAAH,CAAL,CAAR,C;AACD;AACF,OAND,MAMO,IAAI,QAAO,GAAG,CAAH,CAAP,MAAiB,QAArB,EAA+B;AACpC,kBAAQ,GAAG,CAAH,CAAR;AACD;AACF,KAlBM,MAkBA,IAAI,OAAO,EAAP,KAAc,UAAlB,EAA8B;AACnC,aAAO,EAAP;AACD;;AAED,MAAI,OAAO,IAAP,KAAgB,UAApB,EAAgC;AAC9B,UAAM,IAAI,KAAJ,CAAU,OAAO,0BAAjB,CAAN;AACD;;AAED,SAAO,KAAK,KAAL,CAAW,KAAX,EAAkB,UAAlB,CAAP;AACD,CAxDD","file":"call_user_func_array.js","sourcesContent":["module.exports = function call_user_func_array (cb, parameters) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/call_user_func_array/\n  // original by: Thiago Mata (http://thiagomata.blog.com)\n  //  revised by: Jon Hohle\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Diplom@t (http://difane.com/)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  //      note 1: Depending on the `cb` that is passed,\n  //      note 1: this function can use `eval` and/or `new Function`.\n  //      note 1: The `eval` input is however checked to only allow valid function names,\n  //      note 1: So it should not be unsafer than uses without eval (seeing as you can)\n  //      note 1: already pass any function to be executed here.\n  //   example 1: call_user_func_array('isNaN', ['a'])\n  //   returns 1: true\n  //   example 2: call_user_func_array('isNaN', [1])\n  //   returns 2: false\n\n  var $global = (typeof window !== 'undefined' ? window : global)\n  var func\n  var scope = null\n\n  var validJSFunctionNamePattern = /^[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/\n\n  if (typeof cb === 'string') {\n    if (typeof $global[cb] === 'function') {\n      func = $global[cb]\n    } else if (cb.match(validJSFunctionNamePattern)) {\n      func = (new Function(null, 'return ' + cb)()) // eslint-disable-line no-new-func\n    }\n  } else if (Object.prototype.toString.call(cb) === '[object Array]') {\n    if (typeof cb[0] === 'string') {\n      if (cb[0].match(validJSFunctionNamePattern)) {\n        func = eval(cb[0] + \"['\" + cb[1] + \"']\") // eslint-disable-line no-eval\n      }\n    } else {\n      func = cb[0][cb[1]]\n    }\n\n    if (typeof cb[0] === 'string') {\n      if (typeof $global[cb[0]] === 'function') {\n        scope = $global[cb[0]]\n      } else if (cb[0].match(validJSFunctionNamePattern)) {\n        scope = eval(cb[0]) // eslint-disable-line no-eval\n      }\n    } else if (typeof cb[0] === 'object') {\n      scope = cb[0]\n    }\n  } else if (typeof cb === 'function') {\n    func = cb\n  }\n\n  if (typeof func !== 'function') {\n    throw new Error(func + ' is not a valid function')\n  }\n\n  return func.apply(scope, parameters)\n}\n"]}