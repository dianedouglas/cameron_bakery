{"version":3,"sources":["../../../src/php/array/array_count_values.js"],"names":[],"mappings":";;;;AAAA,OAAO,OAAP,GAAiB,SAAS,kBAAT,CAA6B,KAA7B,EAAoC;;;;;;;;;;;;;;;;AAenD,MAAI,SAAS,EAAb;AACA,MAAI,MAAM,EAAV;AACA,MAAI,IAAI,EAAR;;AAEA,MAAI,WAAW,SAAX,QAAW,CAAU,GAAV,EAAe;;AAE5B,QAAI,WAAW,GAAX,yCAAW,GAAX,CAAJ;AACA,QAAI,EAAE,WAAF,EAAJ;AACA,QAAI,MAAM,QAAV,EAAoB;AAClB,UAAI,OAAJ;AACD;AACD,WAAO,CAAP;AACD,GARD;;AAUA,MAAI,cAAc,SAAd,WAAc,CAAU,MAAV,EAAkB,KAAlB,EAAyB;AACzC,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAI,KAAK,KAAL,CAAW,KAAX,MAAsB,KAA1B,EAAiC;AAC/B;AACD;AACF,KAJD,MAIO,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AACpC;AACD;;AAED,QAAI,SAAS,MAAT,IAAmB,OAAO,cAAP,CAAsB,KAAtB,CAAvB,EAAqD;AACnD,QAAE,OAAO,KAAP,CAAF;AACD,KAFD,MAEO;AACL,aAAO,KAAP,IAAgB,CAAhB;AACD;AACF,GAdD;;AAgBA,MAAI,SAAS,KAAT,CAAJ;AACA,MAAI,MAAM,OAAV,EAAmB;AACjB,SAAK,GAAL,IAAY,KAAZ,EAAmB;AACjB,UAAI,MAAM,cAAN,CAAqB,GAArB,CAAJ,EAA+B;AAC7B,oBAAY,IAAZ,CAAiB,IAAjB,EAAuB,MAAvB,EAA+B,MAAM,GAAN,CAA/B;AACD;AACF;AACF;;AAED,SAAO,MAAP;AACD,CAvDD","file":"array_count_values.js","sourcesContent":["module.exports = function array_count_values (array) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/array_count_values/\n  // original by: Ates Goral (http://magnetiq.com)\n  // improved by: Michael White (http://getsprink.com)\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  //    input by: sankai\n  //    input by: Shingo\n  // bugfixed by: Brett Zamir (http://brett-zamir.me)\n  //   example 1: array_count_values([ 3, 5, 3, \"foo\", \"bar\", \"foo\" ])\n  //   returns 1: {3:2, 5:1, \"foo\":2, \"bar\":1}\n  //   example 2: array_count_values({ p1: 3, p2: 5, p3: 3, p4: \"foo\", p5: \"bar\", p6: \"foo\" })\n  //   returns 2: {3:2, 5:1, \"foo\":2, \"bar\":1}\n  //   example 3: array_count_values([ true, 4.2, 42, \"fubar\" ])\n  //   returns 3: {42:1, \"fubar\":1}\n\n  var tmpArr = {}\n  var key = ''\n  var t = ''\n\n  var _getType = function (obj) {\n    // Objects are php associative arrays.\n    var t = typeof obj\n    t = t.toLowerCase()\n    if (t === 'object') {\n      t = 'array'\n    }\n    return t\n  }\n\n  var _countValue = function (tmpArr, value) {\n    if (typeof value === 'number') {\n      if (Math.floor(value) !== value) {\n        return\n      }\n    } else if (typeof value !== 'string') {\n      return\n    }\n\n    if (value in tmpArr && tmpArr.hasOwnProperty(value)) {\n      ++tmpArr[value]\n    } else {\n      tmpArr[value] = 1\n    }\n  }\n\n  t = _getType(array)\n  if (t === 'array') {\n    for (key in array) {\n      if (array.hasOwnProperty(key)) {\n        _countValue.call(this, tmpArr, array[key])\n      }\n    }\n  }\n\n  return tmpArr\n}\n"]}