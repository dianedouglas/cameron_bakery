{"version":3,"sources":["../../../src/php/array/array_map.js"],"names":[],"mappings":";;;;AAAA,OAAO,OAAP,GAAiB,SAAS,SAAT,CAAoB,QAApB,EAA8B;;;;;;;;;;;;AAW7C,MAAI,OAAO,UAAU,MAArB;AACA,MAAI,OAAO,SAAX;AACA,MAAI,MAAM,IAAV;AACA,MAAI,KAAK,QAAT;AACA,MAAI,IAAI,KAAK,CAAL,EAAQ,MAAhB;AACA,MAAI,IAAI,CAAR;AACA,MAAI,IAAI,CAAR;AACA,MAAI,IAAI,CAAR;AACA,MAAI,MAAM,EAAV;AACA,MAAI,SAAS,EAAb;;AAEA,MAAI,UAAW,OAAO,MAAP,KAAkB,WAAlB,GAAgC,MAAhC,GAAyC,MAAxD;;AAEA,SAAO,IAAI,CAAX,EAAc;AACZ,WAAO,IAAI,IAAX,EAAiB;AACf,UAAI,GAAJ,IAAW,KAAK,GAAL,EAAU,CAAV,CAAX;AACD;;AAED,QAAI,CAAJ;AACA,QAAI,CAAJ;;AAEA,QAAI,QAAJ,EAAc;AACZ,UAAI,OAAO,QAAP,KAAoB,QAAxB,EAAkC;AAChC,aAAK,QAAQ,QAAR,CAAL;AACD,OAFD,MAEO,IAAI,QAAO,QAAP,yCAAO,QAAP,OAAoB,QAApB,IAAgC,SAAS,MAA7C,EAAqD;AAC1D,cAAM,OAAO,SAAS,CAAT,CAAP,KAAuB,QAAvB,GAAkC,QAAQ,SAAS,CAAT,CAAR,CAAlC,GAAyD,SAAS,CAAT,CAA/D;AACA,YAAI,OAAO,GAAP,KAAe,WAAnB,EAAgC;AAC9B,gBAAM,IAAI,KAAJ,CAAU,uBAAuB,SAAS,CAAT,CAAjC,CAAN;AACD;AACD,aAAK,OAAO,SAAS,CAAT,CAAP,KAAuB,QAAvB,GAAkC,IAAI,SAAS,CAAT,CAAJ,CAAlC,GAAqD,SAAS,CAAT,CAA1D;AACD;AACD,aAAO,GAAP,IAAc,GAAG,KAAH,CAAS,GAAT,EAAc,GAAd,CAAd;AACD,KAXD,MAWO;AACL,aAAO,GAAP,IAAc,GAAd;AACD;;AAED,UAAM,EAAN;AACD;;AAED,SAAO,MAAP;AACD,CAnDD","file":"array_map.js","sourcesContent":["module.exports = function array_map (callback) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/array_map/\n  // original by: Andrea Giammarchi (http://webreflection.blogspot.com)\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  //    input by: thekid\n  //      note 1: If the callback is a string (or object, if an array is supplied),\n  //      note 1: it can only work if the function name is in the global context\n  //   example 1: array_map( function (a){return (a * a * a)}, [1, 2, 3, 4, 5] )\n  //   returns 1: [ 1, 8, 27, 64, 125 ]\n\n  var argc = arguments.length\n  var argv = arguments\n  var obj = null\n  var cb = callback\n  var j = argv[1].length\n  var i = 0\n  var k = 1\n  var m = 0\n  var tmp = []\n  var tmpArr = []\n\n  var $global = (typeof window !== 'undefined' ? window : global)\n\n  while (i < j) {\n    while (k < argc) {\n      tmp[m++] = argv[k++][i]\n    }\n\n    m = 0\n    k = 1\n\n    if (callback) {\n      if (typeof callback === 'string') {\n        cb = $global[callback]\n      } else if (typeof callback === 'object' && callback.length) {\n        obj = typeof callback[0] === 'string' ? $global[callback[0]] : callback[0]\n        if (typeof obj === 'undefined') {\n          throw new Error('Object not found: ' + callback[0])\n        }\n        cb = typeof callback[1] === 'string' ? obj[callback[1]] : callback[1]\n      }\n      tmpArr[i++] = cb.apply(obj, tmp)\n    } else {\n      tmpArr[i++] = tmp\n    }\n\n    tmp = []\n  }\n\n  return tmpArr\n}\n"]}