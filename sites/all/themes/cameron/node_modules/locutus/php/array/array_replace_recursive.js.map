{"version":3,"sources":["../../../src/php/array/array_replace_recursive.js"],"names":[],"mappings":";;;;AAAA,OAAO,OAAP,GAAiB,SAAS,uBAAT,CAAkC,GAAlC,EAAuC;;;;;;;AAMtD,MAAI,IAAI,CAAR;AACA,MAAI,IAAI,EAAR;AACA,MAAI,OAAO,UAAU,MAArB;AACA,MAAI,MAAJ;;AAEA,MAAI,OAAO,CAAX,EAAc;AACZ,UAAM,IAAI,KAAJ,CAAU,0EAAV,CAAN;AACD;;;;;AAKD,MAAI,OAAO,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,GAA/B,MAAwC,gBAA5C,EAA8D;AAC5D,aAAS,EAAT;AACA,SAAK,CAAL,IAAU,GAAV,EAAe;AACb,aAAO,IAAP,CAAY,IAAI,CAAJ,CAAZ;AACD;AACF,GALD,MAKO;AACL,aAAS,EAAT;AACA,SAAK,CAAL,IAAU,GAAV,EAAe;AACb,aAAO,CAAP,IAAY,IAAI,CAAJ,CAAZ;AACD;AACF;;AAED,OAAK,IAAI,CAAT,EAAY,IAAI,IAAhB,EAAsB,GAAtB,EAA2B;AACzB,SAAK,CAAL,IAAU,UAAU,CAAV,CAAV,EAAwB;AACtB,UAAI,OAAO,CAAP,KAAa,QAAO,OAAO,CAAP,CAAP,MAAqB,QAAtC,EAAgD;AAC9C,eAAO,CAAP,IAAY,wBAAwB,OAAO,CAAP,CAAxB,EAAmC,UAAU,CAAV,EAAa,CAAb,CAAnC,CAAZ;AACD,OAFD,MAEO;AACL,eAAO,CAAP,IAAY,UAAU,CAAV,EAAa,CAAb,CAAZ;AACD;AACF;AACF;;AAED,SAAO,MAAP;AACD,CAzCD","file":"array_replace_recursive.js","sourcesContent":["module.exports = function array_replace_recursive (arr) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/array_replace_recursive/\n  // original by: Brett Zamir (http://brett-zamir.me)\n  //   example 1: array_replace_recursive({'citrus' : ['orange'], 'berries' : ['blackberry', 'raspberry']}, {'citrus' : ['pineapple'], 'berries' : ['blueberry']})\n  //   returns 1: {citrus : ['pineapple'], berries : ['blueberry', 'raspberry']}\n\n  var i = 0\n  var p = ''\n  var argl = arguments.length\n  var retObj\n\n  if (argl < 2) {\n    throw new Error('There should be at least 2 arguments passed to array_replace_recursive()')\n  }\n\n  // Although docs state that the arguments are passed in by reference,\n  // it seems they are not altered, but rather the copy that is returned\n  // So we make a copy here, instead of acting on arr itself\n  if (Object.prototype.toString.call(arr) === '[object Array]') {\n    retObj = []\n    for (p in arr) {\n      retObj.push(arr[p])\n    }\n  } else {\n    retObj = {}\n    for (p in arr) {\n      retObj[p] = arr[p]\n    }\n  }\n\n  for (i = 1; i < argl; i++) {\n    for (p in arguments[i]) {\n      if (retObj[p] && typeof retObj[p] === 'object') {\n        retObj[p] = array_replace_recursive(retObj[p], arguments[i][p])\n      } else {\n        retObj[p] = arguments[i][p]\n      }\n    }\n  }\n\n  return retObj\n}\n"]}