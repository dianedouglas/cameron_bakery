{"version":3,"sources":["../../../src/php/array/natsort.js"],"names":[],"mappings":";;AAAA,OAAO,OAAP,GAAiB,SAAS,OAAT,CAAkB,QAAlB,EAA4B;;;;;;;;;;;;;;;;;;;AAmB3C,MAAI,YAAY,QAAQ,sBAAR,CAAhB;;AAEA,MAAI,SAAS,EAAb;AACA,MAAI,CAAJ;AACA,MAAI,CAAJ;AACA,MAAI,kBAAkB,KAAtB;AACA,MAAI,cAAc,EAAlB;;AAEA,MAAI,SAAS,CAAC,OAAO,OAAP,KAAmB,WAAnB,GAAiC,QAAQ,iBAAR,EAA2B,yBAA3B,CAAjC,GAAyF,SAA1F,KAAwG,IAArH;AACA,oBAAkB,WAAW,IAA7B;AACA,gBAAc,kBAAkB,QAAlB,GAA6B,WAA3C;;;AAGA,OAAK,CAAL,IAAU,QAAV,EAAoB;AAClB,QAAI,SAAS,cAAT,CAAwB,CAAxB,CAAJ,EAAgC;AAC9B,aAAO,IAAP,CAAY,CAAC,CAAD,EAAI,SAAS,CAAT,CAAJ,CAAZ;AACA,UAAI,eAAJ,EAAqB;AACnB,eAAO,SAAS,CAAT,CAAP;AACD;AACF;AACF;AACD,SAAO,IAAP,CAAY,UAAU,CAAV,EAAa,CAAb,EAAgB;AAC1B,WAAO,UAAU,EAAE,CAAF,CAAV,EAAgB,EAAE,CAAF,CAAhB,CAAP;AACD,GAFD;;;AAKA,OAAK,IAAI,CAAT,EAAY,IAAI,OAAO,MAAvB,EAA+B,GAA/B,EAAoC;AAClC,gBAAY,OAAO,CAAP,EAAU,CAAV,CAAZ,IAA4B,OAAO,CAAP,EAAU,CAAV,CAA5B;AACD;;AAED,SAAO,mBAAmB,WAA1B;AACD,CAlDD","file":"natsort.js","sourcesContent":["module.exports = function natsort (inputArr) {\n  //  discuss at: http://locutus.io/php/natsort/\n  // original by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Theriault (https://github.com/Theriault)\n  //      note 1: This function deviates from PHP in returning a copy of the array instead\n  //      note 1: of acting by reference and returning true; this was necessary because\n  //      note 1: IE does not allow deleting and re-adding of properties without caching\n  //      note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to\n  //      note 1: get the PHP behavior, but use this only if you are in an environment\n  //      note 1: such as Firefox extensions where for-in iteration order is fixed and true\n  //      note 1: property deletion is supported. Note that we intend to implement the PHP\n  //      note 1: behavior by default if IE ever does allow it; only gives shallow copy since\n  //      note 1: is by reference in PHP anyways\n  //   example 1: var $array1 = {a:\"img12.png\", b:\"img10.png\", c:\"img2.png\", d:\"img1.png\"}\n  //   example 1: natsort($array1)\n  //   example 1: var $result = $array1\n  //   returns 1: {d: 'img1.png', c: 'img2.png', b: 'img10.png', a: 'img12.png'}\n\n  var strnatcmp = require('../strings/strnatcmp')\n\n  var valArr = []\n  var k\n  var i\n  var sortByReference = false\n  var populateArr = {}\n\n  var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on'\n  sortByReference = iniVal === 'on'\n  populateArr = sortByReference ? inputArr : populateArr\n\n  // Get key and value arrays\n  for (k in inputArr) {\n    if (inputArr.hasOwnProperty(k)) {\n      valArr.push([k, inputArr[k]])\n      if (sortByReference) {\n        delete inputArr[k]\n      }\n    }\n  }\n  valArr.sort(function (a, b) {\n    return strnatcmp(a[1], b[1])\n  })\n\n  // Repopulate the old array\n  for (i = 0; i < valArr.length; i++) {\n    populateArr[valArr[i][0]] = valArr[i][1]\n  }\n\n  return sortByReference || populateArr\n}\n"]}