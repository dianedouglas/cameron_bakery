<?php

/**
 * @file
 * Module adds contextual links for clearing Blocks, Views and Panels cache.
 */

/**
 * Implements hook_menu().
 */
function ui_cache_clear_menu() {
  $items = array();
  if (module_exists('block')) {
    // Special root item with custom access arguments.
    $items['admin/structure/block/ui_cache_clear/%/%'] = array(
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'access callback' => 'user_access',
      'access arguments' => array('use clear cache ui'),
      'tab_root' => 'admin/structure/block/ui_cache_clear/%',
      'tab_parent' => 'admin/structure/block/ui_cache_clear/%',
    );

    $items['admin/structure/block/manage/%/%/cacheclear'] = array(
      'title' => 'Clear cache',
      'page callback' => 'ui_cache_clear_block_callback',
      'page arguments' => array(4, 5),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
      'access callback' => 'user_access',
      'access arguments' => array('use clear cache ui'),
      'tab_root' => 'admin/structure/block/ui_cache_clear/%',
      'tab_parent' => 'admin/structure/block/ui_cache_clear/%',

    );
  }

  if (module_exists('views_ui')) {
    // Special root item with custom access arguments.
    $items['admin/structure/views/ui_cache_clear/%views_ui_cache'] = array(
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'access callback' => 'user_access',
      'access arguments' => array('use clear cache ui'),
      'tab_root' => 'admin/structure/views/ui_cache_clear/%',
      'tab_parent' => 'admin/structure/views/ui_cache_clear/%',
    );

    $items['admin/structure/views/view/%views_ui_cache/cacheclear'] = array(
      'title' => 'Clear cache',
      'page callback' => 'ui_cache_clear_views_callback',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'access callback' => 'user_access',
      'access arguments' => array('use clear cache ui'),
      'tab_root' => 'admin/structure/views/ui_cache_clear/%',
      'tab_parent' => 'admin/structure/views/ui_cache_clear/%',
    );
  }

  if (module_exists('page_manager') && module_exists('panels')) {
    $items['admin/structure/pages/%/operation/%/handlers/%/cache_clear'] = array(
      'title' => 'Clear cache',
      'page callback' => 'ui_cache_clear_panels_callback',
      'page arguments' => array(5, 7),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'access arguments' => array('use clear cache ui'),
      'file' => 'ui_cache_clear.panels.inc',
    );
  }

  if (module_exists('path_breadcrumbs_ui')) {
    // Special root item with custom access arguments.
    $items['admin/structure/path-breadcrumbs/ui_cache_clear/%'] = array(
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'access callback' => 'user_access',
      'access arguments' => array('use clear cache ui'),
      'tab_root' => 'admin/structure/path-breadcrumbs/ui_cache_clear',
      'tab_parent' => 'admin/structure/path-breadcrumbs/ui_cache_clear',
    );

    $items['admin/structure/path-breadcrumbs/edit/%/cacheclear'] = array(
      'title' => 'Clear cache',
      'page callback' => 'ui_cache_clear_path_breadcrumbs_callback',
      'page arguments' => array(4),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
      'access callback' => 'user_access',
      'access arguments' => array('use clear cache ui'),
      'tab_root' => 'admin/structure/path-breadcrumbs/ui_cache_clear',
      'tab_parent' => 'admin/structure/path-breadcrumbs/ui_cache_clear',

    );
  }

  if (module_exists('entitycache')) {
    // NOTE 1: Only for nodes now.
    // NOTE 2: This will be additionally displayed as local tab on node/% page.
    $items['node/%node/ui_cache_clear/entitycache'] = array(
      'title' => 'Clear entity cache',
      'page callback' => 'ui_cache_clear_entitycache_callback',
      'page arguments' => array('node', 1),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'access callback' => 'user_access',
      'access arguments' => array('use clear cache ui'),
      'tab_root' => 'node/%',
      'tab_parent' => 'node/%',
      'weight' => 10,
    );
  }

  if (module_exists('display_cache')) {
    // NOTE 1: Only for nodes now.
    // NOTE 2: This will be additionally displayed as local tab on node/% page.
    $items['node/%node/ui_cache_clear/display_cache'] = array(
      'title' => 'Clear display cache',
      'page callback' => 'ui_cache_clear_display_cache_callback',
      'page arguments' => array('node', 1),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'access callback' => 'user_access',
      'access arguments' => array('use clear cache ui'),
      'tab_root' => 'node/%',
      'tab_parent' => 'node/%',
      'weight' => 20,
    );
  }

  $items['admin/config/development/performance/ui_cache_clear'] = array(
    'title' => 'UI Cache Clear',
    'title callback' => FALSE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ui_cache_clear_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/development/performance/ui_cache_clear/page'] = array(
    'title' => 'Clear this page cache',
    'type' => MENU_CALLBACK,
    'page callback' => 'ui_cache_clear_page_callback',
    'access arguments' => array('use clear cache ui'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ui_cache_clear_permission() {
  return array(
    'use clear cache ui' => array(
      'title' => t('Use contextual UI Cache Clear links'),
      'description' => t('Use contextual links to flush blocks, Views and Panels cache.'),
    ),
  );
}

/**
 * UI Cache Clear settings form.
 */
function ui_cache_clear_admin_settings_form() {

  // Allow to add shortcut for page/Boost cache clearing.
  if (module_exists('shortcut')) {
    $form['add_shortcut'] = _ui_cache_clear_add_shortcut_link();
  }

  $form['ui_cache_clear:always_clear_page'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automaticaly clear current Page/Boost cache when use UI Cache Clear links'),
    '#description' => t('When clear Block, Views or Panels cache with UI Cache Clear, additionally clear current Page/Boost cache.'),
    '#default_value' => variable_get('ui_cache_clear:always_clear_page', 0),
  );

  $form = system_settings_form($form);
  return $form;
}

/**
 * Implements hook_block_view_alter().
 */
function ui_cache_clear_block_view_alter(&$data, $block) {
  if (!isset($block->cache) || $block->cache == DRUPAL_NO_CACHE) {
    // Cache disabled for this block.
    return;
  }

  if (empty($data)) {
    return;
  }

  if (!empty($data['content']['#contextual_links']['ui_cache_clear'])) {
    // Views hook_contextual_links_view_alter already added contextual link.
    return;
  }
  $key = $block->module . '_' . $block->delta;
  if ($key != 'system_main' && $key != 'system_help') {
    // Convert block content to array if $data is HTML string.
    if (!is_array($data)) {
      $output = $data;
      $data = array('content' => array('#markup' => $output));
    }
    // Ensure 'content' key exists.
    if (empty($data['content'])) {
      $data['content'] = array();
    }
    // Convert block content to array if $data['content'] is HTML string.
    if (!is_array($data['content'])) {
      $data['content'] = array('#markup' => $data['content']);
    }
    $data['content']['#contextual_links']['ui_cache_clear'] = array(
      'admin/structure/block/ui_cache_clear',
      array($block->module, $block->delta),
    );
  }

}

/**
 * Implements hook_views_plugins_alter().
 */
function ui_cache_clear_views_plugins_alter(&$plugins) {
  foreach ($plugins['display'] as &$display) {
    $display['contextual links']['ui_cache_clear'] = array(
      'parent path' => 'admin/structure/views/ui_cache_clear',
      'argument properties' => array('name'),
    );
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 * @see views_ui_contextual_links_view_alter()
 */
function ui_cache_clear_contextual_links_view_alter(&$element, $items) {
  // Append the display ID to "Clear cache" link.
  if (!empty($element['#links']['ui-cache-clear-']) && !empty($element['#element']['#views_contextual_links_info']['ui_cache_clear']['view_display_id'])) {
    $display_id = $element['#element']['#views_contextual_links_info']['ui_cache_clear']['view_display_id'];
    $element['#links']['ui-cache-clear-']['href'] .= '/' . $display_id;
  }

  if (isset($element['#links']['path-breadcrumbs-main']) && variable_get('path_breadcrumbs_cache_enabled', FALSE)) {
    if (preg_match('@admin/structure/path-breadcrumbs/edit/([\w-_]+)/main@', $element['#links']['path-breadcrumbs-main']['href'], $matches)) {
      $path_breadcrumbs_name = $matches[1];
      $element['#links']['ui-cache-clear-'] = $element['#links']['path-breadcrumbs-main'];
      $element['#links']['ui-cache-clear-']['title'] = t('Clear cache');
      $element['#links']['ui-cache-clear-']['href'] = "admin/structure/path-breadcrumbs/edit/$path_breadcrumbs_name/cacheclear";
    }
  }
}

/**
 * Implements hook_admin_menu_output_build().
 */
function ui_cache_clear_admin_menu_output_build(&$content) {
  $item = array(
    '#title' => t('Current page & Boost'),
    '#href' => 'admin/config/development/performance/ui_cache_clear/page',
    '#weight' => 100,
    '#access' => user_access('use clear cache ui'),
  );

  if (!empty($content['icon']['icon']['flush-cache']['#access'])) {
    $content['icon']['icon']['flush-cache']['ui_cache_clear'] = $item;
  }
  else {
    // Add link to upper level of Admin menu.
    $content['icon']['icon']['ui_cache_clear'] = $item;
    $content['icon']['icon']['ui_cache_clear']['#title'] = t('Clear this page cache');
  }
}

/**
 * Implements hook_menu_link_alter().
 */
function ui_cache_clear_menu_link_alter(&$item) {
  if ($item['link_path'] == 'admin/config/development/performance/ui_cache_clear/page') {
    $item['options']['alter'] = TRUE;
  }
}

/**
 * Implements hook_translated_menu_item_alter().
 */
function ui_cache_clear_translated_menu_link_alter(&$item) {
  if ($item['href'] == 'admin/config/development/performance/ui_cache_clear/page') {
    $item['localized_options']['query'] = drupal_get_destination();
  }
}

/**
 * Block clear cache callback.
 */
function ui_cache_clear_block_callback($module, $delta) {
  $cache_cid = $module . ':' . $delta;
  cache_clear_all($cache_cid, 'cache_block', TRUE);
  drupal_set_message(t('Block %cid cache cleared.', array('%cid' => $cache_cid)));

  ui_cache_clear_page();
  drupal_goto();
}

/**
 * Views clear cache callback.
 */
function ui_cache_clear_views_callback($display_id) {
  $view_name = arg(4);
  $view = views_get_view($view_name);

  $cache_cid = $view_name;
  $cache_cid .= ':' . $display_id;
  $view->set_display($display_id);

  // Get name of current cache plugin to inform user.
  $cache_plugin = $view->display_handler->get_plugin('cache');
  $plugin_name = $cache_plugin->plugin_name;

  // Clear views cache.
  cache_clear_all($cache_cid, 'cache_views_data', TRUE);
  drupal_set_message(t('Views %cid cache cleared for cache plugin %plugin.', array('%cid' => $cache_cid, '%plugin' => $plugin_name)));

  // Clear block cache if needed.
  if ($view->display_handler->plugin_name == 'block' &&
      $view->display_handler->get_cache_type() != DRUPAL_NO_CACHE
      ) {

    $delta = $view_name . '-' . $view->current_display;
    // @see views_plugin_display_block::save_block_cache().
    if (strlen($delta) >= 32) {
      $delta = md5($delta);
    }
    $cache_cid = 'views:' . $delta;
    cache_clear_all($cache_cid, 'cache_block', TRUE);
    drupal_set_message(t('Block %cid cache cleared.', array('%cid' => $cache_cid)));
  }

  ui_cache_clear_page();
  drupal_goto();
}

/**
 * Page & Boost clear cache callback.
 */
function ui_cache_clear_page_callback() {
  ui_cache_clear_page(FALSE);
  drupal_goto();
}

/**
 * Path Breadcrumbs clear cache callback.
 */
function ui_cache_clear_path_breadcrumbs_callback($path_breadcrumb) {
  $query = drupal_get_destination();
  $cache_cid = 'path_breadcrumbs_load_variant:' . $query['destination'];

  cache_clear_all($cache_cid, PATH_BREADCRUMBS_CACHE_STORAGE, TRUE);
  drupal_set_message(t('Path Breadcrumbs %cid cache cleared.', array('%cid' => $cache_cid)));

  drupal_goto();
}

/**
 * Entity cache clear callback.
 */
function ui_cache_clear_entitycache_callback($entity_type, $entity) {
  list($entity_id) = entity_extract_ids($entity_type, $entity);
  entity_get_controller($entity_type)->resetCache(array($entity_id));
  drupal_set_message(t('Entity cache for %entity_type %entity_id was cleared.', array('%entity_type' => $entity_type, '%entity_id' => $entity_id)));

  drupal_goto();
}

/**
 * Display Cache clear callback.
 */
function ui_cache_clear_display_cache_callback($entity_type, $entity) {
  list($entity_id) = entity_extract_ids($entity_type, $entity);
  display_cache_flush_cache($entity_type, $entity);
  drupal_set_message(t('Display cache for %entity_type %entity_id was cleared.', array('%entity_type' => $entity_type, '%entity_id' => $entity_id)));

  drupal_goto();
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function ui_cache_clear_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  foreach ($data['tabs'] as &$tab_level) {
    if (!empty($tab_level['output']) && is_array($tab_level['output'])) {
      foreach ($tab_level['output'] as &$tab) {
        // Add destination parameter to local tabs links.
        if ($tab['#link']['path'] == 'node/%/ui_cache_clear/entitycache' || $tab['#link']['path'] == 'node/%/ui_cache_clear/display_cache') {
          $tab['#link']['localized_options'] += array('query' => array());
          $tab['#link']['localized_options']['query'] += drupal_get_destination();
        }
      }
    }
  }
}

/**
 * Page & Boost clear cache helper function.
 */
function ui_cache_clear_page($check_setting = TRUE) {
  global $base_root;

  if ($check_setting && !variable_get('ui_cache_clear:always_clear_page', 0)) {
    return;
  }

  $urls = array();

  $referer = $_SERVER['HTTP_REFERER'];
  if (strpos($referer, $base_root) !== 0) {
    return;
  }
  $urls[] = $referer;

  // Find alias.
  $front = variable_get('site_frontpage', 'node');
  $raw_path = str_replace($base_root . '/', '', $referer);
  if (empty($raw_path)) {
    $system_path = $front;
  }
  elseif ($raw_path == $front) {
    $system_path = '';
  }
  else {
    $system_path = drupal_get_normal_path($raw_path);
  }
  if ($system_path != $raw_path) {
    $urls[] = $base_root . '/' . $system_path;
  }

  // Clear boost cache.
  if (function_exists('boost_expire_cache')) {
    boost_expire_cache($urls);
  }

  // Chear page cache.
  if (variable_get('cache', 0)) {
    foreach ($urls as $url) {
      cache_clear_all($url, 'cache_page');
    }
  }

  drupal_set_message(t('Page cache cleared for %urls.', array('%urls' => implode(', ', $urls))));
}

/**
 * Implements hook_ctools_plugin_pre_alter().
 *
 * Overwrite Panels 'contextual link' callback to add link "Clear cache".
 */
function ui_cache_clear_ctools_plugin_pre_alter(&$plugin, &$info) {
  if ($info['type'] == 'task_handlers' && $plugin['name'] == 'panel_context') {
    $plugin['contextual link'] = 'ui_cache_clear_panels_contextual_links';
  }
}

/**
 * Contextual link callback for Panels task handler.
 */
function ui_cache_clear_panels_contextual_links($handler, $plugin, $contexts, $args) {
  // Add default links.
  $links = ctools_task_handler_default_contextual_link($handler, $plugin, $contexts, $args);
  if (!user_access('use clear cache ui')) {
    return;
  }

  // Page Manager may use and may not use subtasks.
  $task_combined = $handler->task . ':' . $handler->subtask;

  $links[] = array(
    'href' => 'admin/structure/pages/nojs/operation/' . $task_combined . '/handlers/' . $handler->name . '/cache_clear',
    'title' => t('Clear cache'),
    'query' => drupal_get_destination(),
  );
  return $links;
}

/**
 * Helper function to output "Add Shortcut" link on settings page.
 * @see shortcut_preprocess_page()
 */
function _ui_cache_clear_add_shortcut_link() {
  $element = array();

  $link = 'admin/config/development/performance/ui_cache_clear/page';
  $shortcut_set = shortcut_current_displayed_set();

  foreach ($shortcut_set->links as $shortcut) {
    if ($link == $shortcut['link_path']) {
      $mlid = $shortcut['mlid'];
      break;
    }
  }
  if (empty($mlid)) {
    $query = array(
      'link' => $link,
      'name' => 'Clear this page cache',
    );
    $query += drupal_get_destination();
    $query['token'] = drupal_get_token('shortcut-add-link');

    $link_text = shortcut_set_switch_access() ? t('Add to %shortcut_set shortcuts', array('%shortcut_set' => $shortcut_set->title)) : t('Add to shortcuts');
    $link_path = 'admin/config/user-interface/shortcut/' . $shortcut_set->set_name . '/add-link-inline';

    $element = array(
      '#type' => 'fieldset',
      '#title' => t('Add shortcut “@link”', array('@link' => t('Clear this page cache'))),
    );
    $element['link'] = array(
      '#attached' => array('css' => array(drupal_get_path('module', 'shortcut') . '/shortcut.css')),
      '#prefix' => '<div class="add-or-remove-shortcuts add-shortcut">',
      '#type' => 'link',
      '#title' => '<span class="icon"></span><span class="text">' . $link_text . '</span>',
      '#href' => $link_path,
      '#options' => array('query' => $query, 'html' => TRUE),
      '#suffix' => '</div>',
    );
    $element['after']['#markup'] = '<br />';

  }

  return $element;
}
